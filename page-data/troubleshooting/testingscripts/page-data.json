{
    "componentChunkName": "component---src-pages-troubleshooting-testingscripts-mdx",
    "path": "/troubleshooting/testingscripts/",
    "result": {"pageContext":{"frontmatter":{"title":"Testing a script"},"relativePagePath":"/troubleshooting/testingscripts.mdx","titleType":"append","MdxNode":{"id":"a3b0ba0f-01ec-5e97-90ff-6a936a478d27","children":[],"parent":"3986d74a-bb28-5610-85c6-d9108bacc232","internal":{"content":"---\ntitle: Testing a script\n---\n\nScripting application now have a \"Test\" button to help test the script that you authored.\nOne can use the test button to prepare the test data and execute the script right from the test dialog. \nAll the logs would be printed out in the \"Process Log\" text area without needing to enable any logging as long as the `service` variable was used to log.\nIn cases where the script needs an Mbo for the test, the dialog provides a way (`Object Path`) to select the Mbo for testing the script. Below we show a sample\nway to set the object path \n\n```\nASSET[assetnum='SPFN0001']\n```\nNote that had we set the path value to just `ASSET`, it would have created a new Mbo for the Asset and used that for this script.\n\nThis will select an asset with assetnum SPFN0001 and use the Mbo for the `mbo` variable in the script context. \nThis can be leveraged for testing Object/Attribute/Action/Condition Launch point scripts.\nThe dialog allows one to set attribute/value pairs to prepare the Mbo for the test using the `Set Attribute Value' table.\nThe process makes best attempt to not commit the modified mbo, but in certain cases this is unavoidable. For example in cases where the event is after commit, the mbo has already been commited. \nFor other cases, the script code itself might initiate a commit. Below screen shot showcases some of the test functionalities \n\nFor tesing object init event:\n\n![Object Init Event](initevent.png)\n\nNote that the resulting Mbo is serialized and presented in the `Data` field of the dialog. This will help one validate when ther the script execution resulted in the right state of the Mbo.\n\nFor testing \"On Add\" object events:\n\n\n![Object on add Event](onaddevent.png)\n\nAs apparent we set values:\n\tASSETNUM\tTESTADD10\n\tASSETTYPE\tFLEET\n\nThis results in an error because ASSETNUM and ASSETTYPE mismatch - as shown in the screen shot.\n\nBelow we show the screenshot when there is no error thrown:\n\n![Object on add Event](onaddevent2.png)\n\nBelow is an example from app validate event:\n\n![app validate event](appvalidate.png)\n\nObject path: ASSET\nSet values:\n\tASSETNUM\tTESTVAL1\n\tASSETTYPE\tFLEET\nResult: Error is thrown because ASSETNUM and ASSETTYPE mismatch\n\nBelow we show the `Can Add Event` which we select a PO which does not have a vendor and attempt to add a POLINE (using the object path notation) to invoke the script.\n\n![Can Add Event](canadd.png)\n\nObject path: PO[ponum='1056']/POLINE\nResult: Error is thrown because PO do not have vendor\n\nBelow we showcase the `Can Delete Event` test:\n\n![Can Delete Event](candelete.png)\n\nObject path format: ASSET[assetnum='7500']\nResult: Error is thrown of ASSETTYPE is FLEET\n\nAdding setup logic for virtual (aka Nonpersistent) mbos (on setup):\n\n![Setup Event](setup.png)\n\nObject path format: ASSET[assetnum='ASSET1' and siteid = 'BEDFORD']/ASCHANGESTATUS\nResult: Status set BROKEN and MEMO set to Test Broken\nNote: property mxe.script.callsetuponinit need to be set to 1\n\nTesting OBJECTNAME.NEW script:\n\n![Object new Event](objectnew.png)\n\nObject path format: ASSET\nResult: EQ1 set to TEST EQ1\n\n\nTesting OBJECTNAME.DUPLICATE script:\n\n![Object dup Event](objdup.png)\n\nObject path format: ASSET[assetnum='1001' and siteid='BEDFORD']\nResult: ASSETNUM set to null\n\nTesting Attribute validate event:\n\n![Attribute validate Event](aatrvalidate.png)\n\nObject path format: ASSET\nAttribute values:\n\tASSETNUM ATTRTEST1\n\tPURCHASEPRICE 300\nResult: Some error is thrown because PURCHASEPRICE > 200\n\nTesting Attribute action event:\n\n![Attribute action Event](aatraction.png)\n\nObject path format: ASSET\nAttribute values:\n\tASSETNUM ATTRAC1\n\tPURCHASEPRICE 100\nResult: EQ7 set to 50\n\n\nTesting Attribute init event:\n\n![Attribute init Event](attrinit.png)\n\nObject path format: ASSET[assetnum='1001']\nResult: EQ2 set to ASSETNUM (1001)\n\nTesting lookup scripts:\n\n![lookup Event](lookup.png)\n\nObject: ASSET\nAttribute: EQ11\nObject path format: ASSET[assetnum=’ASSET1’]\nResult: Values for lookup will be from ALNDOMAIN PHONETYPE\n\n\nObject Structure Script Processing - Inbound:\nFunction: beforeProcess(ctx)\n\n![before process os Event](osbeforeprocess.png)\n\nUse the \"select file\" option to select a xml or json file:\n\nTest XML: MXITEM1.XML\nTest JSON: MXITEM1.JSON\nResult: Transaction is skipped for LOTTYPE=NOLOT\n\nObject Structure Script Processing - Inbound:\nFunction: mboRules(ctx)\n\n![os mbo rules](osmborules.png)\n\nTest XML: MXINVISSUE1.XML\nTest JSON: MXINVISSUE1.JSON\nResult: Transaction is skipped for ISSUETYPE=RETURN\n\nTesting object structure inbound:-Functions: beforeMboData(ctx) and afterMboData(ctx)\n\n![beforembodata](beforembodata.png)\n\nTest XML: MXITEM2.XML\nTest JSON: MXITEM2.JSON\nResult: Set COMMODITYGROUP based on HIERARCHYPATH\n\nTesting Object structure inbound function: changeStatus(ctx)\n\n![changestatus](changestatus.png)\n\nTest XML: MXITEM3.XML\nTest JSON: MXITEM3.JSON\nResult: Change Status with MEMO\n\nObject Structure Script Processing - Outbound\n\n![os out](osout.png)\n\nObject path format: PO[ponum='1002']\nResult: \nSet description\nSkip POLINE without ITEMNUM\nSkip TAX fields if TEXED is false\n\nObject Structure Query:\n\n![os query](osquery.png)\n\nObject path format: WORKORDER\nParameters: \n\tASSETNUM 11200\n\tSTATUS WAPPR\nResult: \nWhere clause applied to MboSet (assetnum='11200' and status = 'WAPPR')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","type":"Mdx","contentDigest":"d7686fe0a4e3f7a3a78b5afb6ddebf38","owner":"gatsby-plugin-mdx","counter":199},"frontmatter":{"title":"Testing a script"},"exports":{},"rawBody":"---\ntitle: Testing a script\n---\n\nScripting application now have a \"Test\" button to help test the script that you authored.\nOne can use the test button to prepare the test data and execute the script right from the test dialog. \nAll the logs would be printed out in the \"Process Log\" text area without needing to enable any logging as long as the `service` variable was used to log.\nIn cases where the script needs an Mbo for the test, the dialog provides a way (`Object Path`) to select the Mbo for testing the script. Below we show a sample\nway to set the object path \n\n```\nASSET[assetnum='SPFN0001']\n```\nNote that had we set the path value to just `ASSET`, it would have created a new Mbo for the Asset and used that for this script.\n\nThis will select an asset with assetnum SPFN0001 and use the Mbo for the `mbo` variable in the script context. \nThis can be leveraged for testing Object/Attribute/Action/Condition Launch point scripts.\nThe dialog allows one to set attribute/value pairs to prepare the Mbo for the test using the `Set Attribute Value' table.\nThe process makes best attempt to not commit the modified mbo, but in certain cases this is unavoidable. For example in cases where the event is after commit, the mbo has already been commited. \nFor other cases, the script code itself might initiate a commit. Below screen shot showcases some of the test functionalities \n\nFor tesing object init event:\n\n![Object Init Event](initevent.png)\n\nNote that the resulting Mbo is serialized and presented in the `Data` field of the dialog. This will help one validate when ther the script execution resulted in the right state of the Mbo.\n\nFor testing \"On Add\" object events:\n\n\n![Object on add Event](onaddevent.png)\n\nAs apparent we set values:\n\tASSETNUM\tTESTADD10\n\tASSETTYPE\tFLEET\n\nThis results in an error because ASSETNUM and ASSETTYPE mismatch - as shown in the screen shot.\n\nBelow we show the screenshot when there is no error thrown:\n\n![Object on add Event](onaddevent2.png)\n\nBelow is an example from app validate event:\n\n![app validate event](appvalidate.png)\n\nObject path: ASSET\nSet values:\n\tASSETNUM\tTESTVAL1\n\tASSETTYPE\tFLEET\nResult: Error is thrown because ASSETNUM and ASSETTYPE mismatch\n\nBelow we show the `Can Add Event` which we select a PO which does not have a vendor and attempt to add a POLINE (using the object path notation) to invoke the script.\n\n![Can Add Event](canadd.png)\n\nObject path: PO[ponum='1056']/POLINE\nResult: Error is thrown because PO do not have vendor\n\nBelow we showcase the `Can Delete Event` test:\n\n![Can Delete Event](candelete.png)\n\nObject path format: ASSET[assetnum='7500']\nResult: Error is thrown of ASSETTYPE is FLEET\n\nAdding setup logic for virtual (aka Nonpersistent) mbos (on setup):\n\n![Setup Event](setup.png)\n\nObject path format: ASSET[assetnum='ASSET1' and siteid = 'BEDFORD']/ASCHANGESTATUS\nResult: Status set BROKEN and MEMO set to Test Broken\nNote: property mxe.script.callsetuponinit need to be set to 1\n\nTesting OBJECTNAME.NEW script:\n\n![Object new Event](objectnew.png)\n\nObject path format: ASSET\nResult: EQ1 set to TEST EQ1\n\n\nTesting OBJECTNAME.DUPLICATE script:\n\n![Object dup Event](objdup.png)\n\nObject path format: ASSET[assetnum='1001' and siteid='BEDFORD']\nResult: ASSETNUM set to null\n\nTesting Attribute validate event:\n\n![Attribute validate Event](aatrvalidate.png)\n\nObject path format: ASSET\nAttribute values:\n\tASSETNUM ATTRTEST1\n\tPURCHASEPRICE 300\nResult: Some error is thrown because PURCHASEPRICE > 200\n\nTesting Attribute action event:\n\n![Attribute action Event](aatraction.png)\n\nObject path format: ASSET\nAttribute values:\n\tASSETNUM ATTRAC1\n\tPURCHASEPRICE 100\nResult: EQ7 set to 50\n\n\nTesting Attribute init event:\n\n![Attribute init Event](attrinit.png)\n\nObject path format: ASSET[assetnum='1001']\nResult: EQ2 set to ASSETNUM (1001)\n\nTesting lookup scripts:\n\n![lookup Event](lookup.png)\n\nObject: ASSET\nAttribute: EQ11\nObject path format: ASSET[assetnum=’ASSET1’]\nResult: Values for lookup will be from ALNDOMAIN PHONETYPE\n\n\nObject Structure Script Processing - Inbound:\nFunction: beforeProcess(ctx)\n\n![before process os Event](osbeforeprocess.png)\n\nUse the \"select file\" option to select a xml or json file:\n\nTest XML: MXITEM1.XML\nTest JSON: MXITEM1.JSON\nResult: Transaction is skipped for LOTTYPE=NOLOT\n\nObject Structure Script Processing - Inbound:\nFunction: mboRules(ctx)\n\n![os mbo rules](osmborules.png)\n\nTest XML: MXINVISSUE1.XML\nTest JSON: MXINVISSUE1.JSON\nResult: Transaction is skipped for ISSUETYPE=RETURN\n\nTesting object structure inbound:-Functions: beforeMboData(ctx) and afterMboData(ctx)\n\n![beforembodata](beforembodata.png)\n\nTest XML: MXITEM2.XML\nTest JSON: MXITEM2.JSON\nResult: Set COMMODITYGROUP based on HIERARCHYPATH\n\nTesting Object structure inbound function: changeStatus(ctx)\n\n![changestatus](changestatus.png)\n\nTest XML: MXITEM3.XML\nTest JSON: MXITEM3.JSON\nResult: Change Status with MEMO\n\nObject Structure Script Processing - Outbound\n\n![os out](osout.png)\n\nObject path format: PO[ponum='1002']\nResult: \nSet description\nSkip POLINE without ITEMNUM\nSkip TAX fields if TEXED is false\n\nObject Structure Query:\n\n![os query](osquery.png)\n\nObject path format: WORKORDER\nParameters: \n\tASSETNUM 11200\n\tSTATUS WAPPR\nResult: \nWhere clause applied to MboSet (assetnum='11200' and status = 'WAPPR')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/troubleshooting/testingscripts.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}