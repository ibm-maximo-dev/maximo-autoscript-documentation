{
    "componentChunkName": "component---src-pages-troubleshooting-testingscripts-mdx",
    "path": "/troubleshooting/testingscripts/",
    "result": {"pageContext":{"frontmatter":{"title":"Testing a script"},"relativePagePath":"/troubleshooting/testingscripts.mdx","titleType":"append","MdxNode":{"id":"a3b0ba0f-01ec-5e97-90ff-6a936a478d27","children":[],"parent":"3986d74a-bb28-5610-85c6-d9108bacc232","internal":{"content":"---\ntitle: Testing a script\n---\n\nThe scripting application now has a **Test** button to help test the script that you authored.\nYou can use **Test** to prepare the test data and execute the script right from the test dialog. \nAll the logs would be printed out in the **Process Log** text area without enabling any logging as long as the `service` variable was used for the log.\nIn cases where the script needs an MBO for the test, the dialog provides a way (`Object Path`) to select the MBO for testing the script. The following sample\nway shows how to set the object path. \n\n```\nASSET[assetnum='SPFN0001']\n```\nNote that if you had set the path value to just `ASSET`, it would have created a new MBO for the Asset and used that for this script.\n\nThis selects an asset with assetnum SPFN0001 and uses the MBO for the `mbo` variable in the script context. \nThis can be leveraged for testing Object or Attribute or Action or Condition Launch point scripts.\nThe dialog allows you to set attribute or value pairs to prepare the MBO for the test using the `Set Attribute Value' table.\nThe process makes a best attempt to not commit the modified MBO, but in certain cases this is unavoidable. For example, in cases where the event is after a commit, the MBO is already committed. \nFor other cases, the script code itself might initiate a commit. The following screen shot showcases some of the test functionalities. \n\nFor tesing object init event:\n\n![Object Init Event](initevent.png)\n\nNote that the resulting MBO is serialized and presented in the **Data** field of the dialog. This helps you to validate when the the script execution resulted in the right state of the MBO.\n\n## For testing \"On Add\" object events:\n\n\n![Object on add Event](onaddevent.png)\n\nAs apparent you set values:\n\tASSETNUM\tTESTADD10\n\tASSETTYPE\tFLEET\n\nThis results in an error because ASSETNUM and ASSETTYPE mismatch - as shown in the screen shot.\n\nThe following screenshot is when there is no error thrown:\n\n![Object on add Event](onaddevent2.png)\n\nThe following example is from app validate event:\n\n![app validate event](appvalidate.png)\n\nObject path: ASSET\nSet values:\n\tASSETNUM\tTESTVAL1\n\tASSETTYPE\tFLEET\nResult: Error is thrown because ASSETNUM and ASSETTYPE mismatch\n\n## Can Add Event\nThe following screen shot shows the `Can Add Event` in which you select a PO which does not have a vendor and attempt to add a POLINE, using the object path notation to invoke the script.\n\n![Can Add Event](canadd.png)\n\nObject path: PO[ponum='1056']/POLINE\nResult: Error is thrown because PO do not have vendor\n\n## Can Delete\n\nThe following screenshot shows the `Can Delete Event` test:\n\n![Can Delete Event](candelete.png)\n\nObject path format: ASSET[assetnum='7500']\nResult: Error is thrown of ASSETTYPE is FLEET\n\nAdding setup logic for virtual (aka Nonpersistent) MBOs on setup:\n\n![Setup Event](setup.png)\n\nObject path format: ASSET[assetnum='ASSET1' and siteid = 'BEDFORD']/ASCHANGESTATUS\nResult: Status set BROKEN and MEMO set to Test Broken\nNote: property mxe.script.callsetuponinit need to be set to 1\n\n\n## Testing OBJECTNAME.NEW script:\n\n![Object new Event](objectnew.png)\n\nObject path format: ASSET\nResult: EQ1 set to TEST EQ1\n\n\nTesting OBJECTNAME.DUPLICATE script:\n\n![Object dup Event](objdup.png)\n\nObject path format: ASSET[assetnum='1001' and siteid='BEDFORD']\nResult: ASSETNUM set to null\n\n## Testing Attribute validate event:\n\n![Attribute validate Event](aatrvalidate.png)\n\nObject path format: ASSET\nAttribute values:\n\tASSETNUM ATTRTEST1\n\tPURCHASEPRICE 300\nResult: Some error is thrown because PURCHASEPRICE > 200\n\n## Testing Attribute action event:\n\n![Attribute action Event](aatraction.png)\n\nObject path format: ASSET\nAttribute values:\n\tASSETNUM ATTRAC1\n\tPURCHASEPRICE 100\nResult: EQ7 set to 50\n\n\n## Testing Attribute init event:\n\n![Attribute init Event](attrinit.png)\n\nObject path format: ASSET[assetnum='1001']\nResult: EQ2 set to ASSETNUM (1001)\n\n## Testing lookup scripts:\n\n![lookup Event](lookup.png)\n\nObject: ASSET\nAttribute: EQ11\nObject path format: ASSET[assetnum=’ASSET1’]\nResult: Values for lookup will be from ALNDOMAIN PHONETYPE\n\n\n## Object Structure Script Processing - Inbound:\n**Function: beforeProcess(ctx)**\n\n![before process os Event](osbeforeprocess.png)\n\nUse the \"select file\" option to select a xml or json file:\n\nTest XML: MXITEM1.XML\nTest JSON: MXITEM1.JSON\nResult: Transaction is skipped for LOTTYPE=NOLOT\n\nObject Structure Script Processing - Inbound:\n\n**Function: mboRules(ctx)**\n\n![os mbo rules](osmborules.png)\n\nTest XML: MXINVISSUE1.XML\nTest JSON: MXINVISSUE1.JSON\nResult: Transaction is skipped for ISSUETYPE=RETURN\n\n## Testing object structure inbound:-Functions: beforeMboData(ctx) and afterMboData(ctx)\n\n![beforembodata](beforembodata.png)\n\nTest XML: MXITEM2.XML\nTest JSON: MXITEM2.JSON\nResult: Set COMMODITYGROUP based on HIERARCHYPATH\n\n## Testing Object structure inbound function: changeStatus(ctx)\n\n![changestatus](changestatus.png)\n\nTest XML: MXITEM3.XML\nTest JSON: MXITEM3.JSON\nResult: Change Status with MEMO\n\n## Object Structure Script Processing - Outbound\n\n![os out](osout.png)\n\nObject path format: PO[ponum='1002']\nResult: \nSet description\nSkip POLINE without ITEMNUM\nSkip TAX fields if TEXED is false\n\n## Object Structure Query:\n\n![os query](osquery.png)\n\nName: OSQUERY.MXAPIWO.EMXWOFILTER\nObject path format: WORKORDER\nParameters: \n\tASSETNUM 11200\n\tSTATUS WAPPR\nResult: \nWhere clause applied to MboSet (assetnum='11200' and status = 'WAPPR')\n\n## Object Structure Actions:\n\n![os actions](osaction.png)\n\nName: OSACTION.MXAPIASSET.SETPRIORITY\nObject path format: ASSET\nParameters: \n\tASSETNUM 11200\n\tSTATUS IT\nResult: \nSets priority based on the ASSETTYPE\n\n## Event Filters For Publish Channel:\n\n![Event Filter](eventfilter.png)\n\nName: PUBLISH.MXASSETINTERFACE.EVENTFILTER\nObject path format: ASSET\nParameters: \n\tASSETNUM 11200\n\tSTATUS IT\nResult: \nSets priority based on the ASSETTYPE\n\n## Exits for Publish Channels External Exit:\n\n![Publish Exits](pubexit2.png)\n\nName: PUBLISH.MXASSETINTERFACE.EXTEXIT.OUT\nObject path format: ASSET[assetnum='1008']\n\nResult: \nSet description to status if status is OPERATION\n\n\n## Exits for Publish Channels User Exit Before:\n\n![Publish Exits](pubexit2.png)\n\nName: PUBLISH.MXASSETINTERFACE.USEREXIT.OUT.BEFORE\n\nTest XML: MXASSET1.XML\nTest JSON: MXASSET1.JSON\nResult: Skip transaction if STATUS=BROKEN\n\n\n## Exits for Publish Channels User Exit After:\n\n![Publish Exits](pubexit3.png)\n\nName: PUBLISH.MXASSETINTERFACE.USEREXIT.OUT.AFTER\n\nTest XML: MXASSET1.XML\nTest JSON: MXASSET1.JSON\nResult: Display STATUS from IR record and EQ3 (set in before exit) from ER record\n\n## Enterprise service External Exit script:\n\n![Ent Ext Exit Exits](entextexit.png)\n\n![Ent Ext All Exit Exits](entextexit2.png)\n\nName: SYNC.MXITEMINTERFACE.EXTEXITIN\n\nExternal System: EXTSYS1\nTest XML: MXITEM1.XML\nTest JSON: MXITEM1.JSON\nResult: \nSkip transaction if LOTYPE = NOLOT\nSkip transaction if ITEMNUM is null\nSet description to ITEMNUM\n\n## Invoke Channel Scripting\n\n![Invoke Channel Exit](invokechannel.png)\n\nName: INVOKE.ZIPCHANNEL.USEREXIT.OUT.AFTER\nLanguage: js\nNew/Existing: New\nObject path format: PERSON\nComplete process: TRUE\nAttribute values:\n\tPERSONID TEST5\nCITY BOSTON\nResult: \nSet STATEPROVINCE and POSTALCODE\n\n## Endpoint Scripting\n\n![Endpoint Script](epscript.png)\n\nName: TESTENDPOINT\nLanguage: Python\nTest Script Type: ENDPOINT\nTest XML: MXITEM1.XML\nTest JSON: MXITEM1.JSON\nResult: \nDisplay payload\nDisplay script name from metadata\n\n\n## Condition Launch Point\n\n![Condition Script](condition.png)\n\nName: SUMCOST\nLanguage: Python\nWhere clause: assetnum = ‘11200’\nResult: \nReturn True of sum of SPAREPART QTY > 10\nReturn False of sum of SPAREPART QTY < 10\n\n## Action Launch Point\n\n![Action LP Script](actionlp.png)\n\nName: CACLMETER\nLanguage: Python\nObject path: ASSET[assetnum = ‘11430’]\nResult: \nSet EQ7 to ASSETMETER.OLDREADING\n\n## REST api\n\n![REST Script](restscript.png)\n\nName: INVOKEREST\nLanguage: Python\nQuery parameters: \npersonid = ‘LIBERI\nsiteid = ‘FLEET’\nResult: \nThrow exception if site is invalid\nSET LOCATIONSITE to siteid\n\n## Role Scripting\n\n![Role Test](roletest.png)\n\nName: MAXROLE.EMXROLE\nLanguage: Python\nWhere clause: assetnum = ‘11430’\nResult: \nCheck for PERSONGROUP TIER1 and TIER2\n\n\n## MXException script\n\n![MXException Test](mxetest.png)\n\nResult: Display original and additional message\n\n\n## Formula script\n\n![Formula Test](formulatest.png)\n\nName: STANDARDDEV\nLanguage: Python\nNew/Existing: Existing\nObject path format: ASSET[assetnum=’11430’]\nProperties: \nparam[0] = “ALLWO”\nparam[1] = \"estlabcost\"\nResult: \nDisplay standard deviation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","type":"Mdx","contentDigest":"9ae0acde711ce21e368dd8af73f06257","owner":"gatsby-plugin-mdx","counter":218},"frontmatter":{"title":"Testing a script"},"exports":{},"rawBody":"---\ntitle: Testing a script\n---\n\nThe scripting application now has a **Test** button to help test the script that you authored.\nYou can use **Test** to prepare the test data and execute the script right from the test dialog. \nAll the logs would be printed out in the **Process Log** text area without enabling any logging as long as the `service` variable was used for the log.\nIn cases where the script needs an MBO for the test, the dialog provides a way (`Object Path`) to select the MBO for testing the script. The following sample\nway shows how to set the object path. \n\n```\nASSET[assetnum='SPFN0001']\n```\nNote that if you had set the path value to just `ASSET`, it would have created a new MBO for the Asset and used that for this script.\n\nThis selects an asset with assetnum SPFN0001 and uses the MBO for the `mbo` variable in the script context. \nThis can be leveraged for testing Object or Attribute or Action or Condition Launch point scripts.\nThe dialog allows you to set attribute or value pairs to prepare the MBO for the test using the `Set Attribute Value' table.\nThe process makes a best attempt to not commit the modified MBO, but in certain cases this is unavoidable. For example, in cases where the event is after a commit, the MBO is already committed. \nFor other cases, the script code itself might initiate a commit. The following screen shot showcases some of the test functionalities. \n\nFor tesing object init event:\n\n![Object Init Event](initevent.png)\n\nNote that the resulting MBO is serialized and presented in the **Data** field of the dialog. This helps you to validate when the the script execution resulted in the right state of the MBO.\n\n## For testing \"On Add\" object events:\n\n\n![Object on add Event](onaddevent.png)\n\nAs apparent you set values:\n\tASSETNUM\tTESTADD10\n\tASSETTYPE\tFLEET\n\nThis results in an error because ASSETNUM and ASSETTYPE mismatch - as shown in the screen shot.\n\nThe following screenshot is when there is no error thrown:\n\n![Object on add Event](onaddevent2.png)\n\nThe following example is from app validate event:\n\n![app validate event](appvalidate.png)\n\nObject path: ASSET\nSet values:\n\tASSETNUM\tTESTVAL1\n\tASSETTYPE\tFLEET\nResult: Error is thrown because ASSETNUM and ASSETTYPE mismatch\n\n## Can Add Event\nThe following screen shot shows the `Can Add Event` in which you select a PO which does not have a vendor and attempt to add a POLINE, using the object path notation to invoke the script.\n\n![Can Add Event](canadd.png)\n\nObject path: PO[ponum='1056']/POLINE\nResult: Error is thrown because PO do not have vendor\n\n## Can Delete\n\nThe following screenshot shows the `Can Delete Event` test:\n\n![Can Delete Event](candelete.png)\n\nObject path format: ASSET[assetnum='7500']\nResult: Error is thrown of ASSETTYPE is FLEET\n\nAdding setup logic for virtual (aka Nonpersistent) MBOs on setup:\n\n![Setup Event](setup.png)\n\nObject path format: ASSET[assetnum='ASSET1' and siteid = 'BEDFORD']/ASCHANGESTATUS\nResult: Status set BROKEN and MEMO set to Test Broken\nNote: property mxe.script.callsetuponinit need to be set to 1\n\n\n## Testing OBJECTNAME.NEW script:\n\n![Object new Event](objectnew.png)\n\nObject path format: ASSET\nResult: EQ1 set to TEST EQ1\n\n\nTesting OBJECTNAME.DUPLICATE script:\n\n![Object dup Event](objdup.png)\n\nObject path format: ASSET[assetnum='1001' and siteid='BEDFORD']\nResult: ASSETNUM set to null\n\n## Testing Attribute validate event:\n\n![Attribute validate Event](aatrvalidate.png)\n\nObject path format: ASSET\nAttribute values:\n\tASSETNUM ATTRTEST1\n\tPURCHASEPRICE 300\nResult: Some error is thrown because PURCHASEPRICE > 200\n\n## Testing Attribute action event:\n\n![Attribute action Event](aatraction.png)\n\nObject path format: ASSET\nAttribute values:\n\tASSETNUM ATTRAC1\n\tPURCHASEPRICE 100\nResult: EQ7 set to 50\n\n\n## Testing Attribute init event:\n\n![Attribute init Event](attrinit.png)\n\nObject path format: ASSET[assetnum='1001']\nResult: EQ2 set to ASSETNUM (1001)\n\n## Testing lookup scripts:\n\n![lookup Event](lookup.png)\n\nObject: ASSET\nAttribute: EQ11\nObject path format: ASSET[assetnum=’ASSET1’]\nResult: Values for lookup will be from ALNDOMAIN PHONETYPE\n\n\n## Object Structure Script Processing - Inbound:\n**Function: beforeProcess(ctx)**\n\n![before process os Event](osbeforeprocess.png)\n\nUse the \"select file\" option to select a xml or json file:\n\nTest XML: MXITEM1.XML\nTest JSON: MXITEM1.JSON\nResult: Transaction is skipped for LOTTYPE=NOLOT\n\nObject Structure Script Processing - Inbound:\n\n**Function: mboRules(ctx)**\n\n![os mbo rules](osmborules.png)\n\nTest XML: MXINVISSUE1.XML\nTest JSON: MXINVISSUE1.JSON\nResult: Transaction is skipped for ISSUETYPE=RETURN\n\n## Testing object structure inbound:-Functions: beforeMboData(ctx) and afterMboData(ctx)\n\n![beforembodata](beforembodata.png)\n\nTest XML: MXITEM2.XML\nTest JSON: MXITEM2.JSON\nResult: Set COMMODITYGROUP based on HIERARCHYPATH\n\n## Testing Object structure inbound function: changeStatus(ctx)\n\n![changestatus](changestatus.png)\n\nTest XML: MXITEM3.XML\nTest JSON: MXITEM3.JSON\nResult: Change Status with MEMO\n\n## Object Structure Script Processing - Outbound\n\n![os out](osout.png)\n\nObject path format: PO[ponum='1002']\nResult: \nSet description\nSkip POLINE without ITEMNUM\nSkip TAX fields if TEXED is false\n\n## Object Structure Query:\n\n![os query](osquery.png)\n\nName: OSQUERY.MXAPIWO.EMXWOFILTER\nObject path format: WORKORDER\nParameters: \n\tASSETNUM 11200\n\tSTATUS WAPPR\nResult: \nWhere clause applied to MboSet (assetnum='11200' and status = 'WAPPR')\n\n## Object Structure Actions:\n\n![os actions](osaction.png)\n\nName: OSACTION.MXAPIASSET.SETPRIORITY\nObject path format: ASSET\nParameters: \n\tASSETNUM 11200\n\tSTATUS IT\nResult: \nSets priority based on the ASSETTYPE\n\n## Event Filters For Publish Channel:\n\n![Event Filter](eventfilter.png)\n\nName: PUBLISH.MXASSETINTERFACE.EVENTFILTER\nObject path format: ASSET\nParameters: \n\tASSETNUM 11200\n\tSTATUS IT\nResult: \nSets priority based on the ASSETTYPE\n\n## Exits for Publish Channels External Exit:\n\n![Publish Exits](pubexit2.png)\n\nName: PUBLISH.MXASSETINTERFACE.EXTEXIT.OUT\nObject path format: ASSET[assetnum='1008']\n\nResult: \nSet description to status if status is OPERATION\n\n\n## Exits for Publish Channels User Exit Before:\n\n![Publish Exits](pubexit2.png)\n\nName: PUBLISH.MXASSETINTERFACE.USEREXIT.OUT.BEFORE\n\nTest XML: MXASSET1.XML\nTest JSON: MXASSET1.JSON\nResult: Skip transaction if STATUS=BROKEN\n\n\n## Exits for Publish Channels User Exit After:\n\n![Publish Exits](pubexit3.png)\n\nName: PUBLISH.MXASSETINTERFACE.USEREXIT.OUT.AFTER\n\nTest XML: MXASSET1.XML\nTest JSON: MXASSET1.JSON\nResult: Display STATUS from IR record and EQ3 (set in before exit) from ER record\n\n## Enterprise service External Exit script:\n\n![Ent Ext Exit Exits](entextexit.png)\n\n![Ent Ext All Exit Exits](entextexit2.png)\n\nName: SYNC.MXITEMINTERFACE.EXTEXITIN\n\nExternal System: EXTSYS1\nTest XML: MXITEM1.XML\nTest JSON: MXITEM1.JSON\nResult: \nSkip transaction if LOTYPE = NOLOT\nSkip transaction if ITEMNUM is null\nSet description to ITEMNUM\n\n## Invoke Channel Scripting\n\n![Invoke Channel Exit](invokechannel.png)\n\nName: INVOKE.ZIPCHANNEL.USEREXIT.OUT.AFTER\nLanguage: js\nNew/Existing: New\nObject path format: PERSON\nComplete process: TRUE\nAttribute values:\n\tPERSONID TEST5\nCITY BOSTON\nResult: \nSet STATEPROVINCE and POSTALCODE\n\n## Endpoint Scripting\n\n![Endpoint Script](epscript.png)\n\nName: TESTENDPOINT\nLanguage: Python\nTest Script Type: ENDPOINT\nTest XML: MXITEM1.XML\nTest JSON: MXITEM1.JSON\nResult: \nDisplay payload\nDisplay script name from metadata\n\n\n## Condition Launch Point\n\n![Condition Script](condition.png)\n\nName: SUMCOST\nLanguage: Python\nWhere clause: assetnum = ‘11200’\nResult: \nReturn True of sum of SPAREPART QTY > 10\nReturn False of sum of SPAREPART QTY < 10\n\n## Action Launch Point\n\n![Action LP Script](actionlp.png)\n\nName: CACLMETER\nLanguage: Python\nObject path: ASSET[assetnum = ‘11430’]\nResult: \nSet EQ7 to ASSETMETER.OLDREADING\n\n## REST api\n\n![REST Script](restscript.png)\n\nName: INVOKEREST\nLanguage: Python\nQuery parameters: \npersonid = ‘LIBERI\nsiteid = ‘FLEET’\nResult: \nThrow exception if site is invalid\nSET LOCATIONSITE to siteid\n\n## Role Scripting\n\n![Role Test](roletest.png)\n\nName: MAXROLE.EMXROLE\nLanguage: Python\nWhere clause: assetnum = ‘11430’\nResult: \nCheck for PERSONGROUP TIER1 and TIER2\n\n\n## MXException script\n\n![MXException Test](mxetest.png)\n\nResult: Display original and additional message\n\n\n## Formula script\n\n![Formula Test](formulatest.png)\n\nName: STANDARDDEV\nLanguage: Python\nNew/Existing: Existing\nObject path format: ASSET[assetnum=’11430’]\nProperties: \nparam[0] = “ALLWO”\nparam[1] = \"estlabcost\"\nResult: \nDisplay standard deviation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/troubleshooting/testingscripts.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}