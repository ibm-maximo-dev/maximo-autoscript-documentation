{
    "componentChunkName": "component---src-pages-troubleshooting-debugscript-mdx",
    "path": "/troubleshooting/debugscript/",
    "result": {"pageContext":{"frontmatter":{"title":"Debugging a script"},"relativePagePath":"/troubleshooting/debugscript.mdx","titleType":"append","MdxNode":{"id":"9a7aa7dc-3e89-596f-bcdc-0b75bd7ba090","children":[],"parent":"45a08dda-d3f6-56ce-9f9e-83f5449a703b","internal":{"content":"---\ntitle: Debugging a script\n---\n\n## Debugging a script\nBy default, all script related logging is done using the autoscript logger. Each script\ncan be configured at different log levels like DEBUG,INFO,ERROR, and so on. The default\nsetup for any script is at ERROR, which can be changed from management\napplication or at the time of creation in the second step of the wizard.\nIf you were to debug the following script:\n\n```python\ny=float(iplr)+float(olr)\nif y!=float(plr):\n  pnr=str(y)\n```\n\nYou put the following debug statements: \n\n\n```python\nprint \"iplr=\"+iplr\nprint \"olr=\"+olr\ny=float(iplr)+float(olr)\nprint \"y=\"+y\nif y!=float(plr):\n  pnr=str(y)\n  print “pnr=”+pnr\n```\n\nYou must make sure that the log level for the autoscript logger is set to\nthe log level of the script. For example, set both of them to INFO.\nThis will result in the print statements to show up in your systemout log. If\nrequired, the log statements produced by this logger can be re-directed to a\ndedicated log file holding only script-related log statements. The syntax\nof the print statement depends upon which language the script is being written\nwith. Also, if the \"autoscript\" logger is set to ERROR level logs only, then the print\nstatements inside the automation script will not be written to a log file. \n\nThis way of logging is not ideal as the scripting framework would not log this in real time. \nIt will log it after the script execution completes. \nThis does not create an ideal debugging session, especially for long running scripts. \nScript developers should leverage the `service.log` set of APIs to log real time. \nRecent enhancements allow the logger to be set at the individual script scope. \nAll you should do is create a logger with the script name and set the log level accordingly. \nIn the following screenshot, you create a logger for a script called ABCD and set the log level to INFO.\n\n\n![Script Logger](scriptlog.jpg)\n\nThe base autoscript logger is set at ERROR level.\nNow, set the script ABC log level to INFO from the Automation Script application. Use the following script code:\n\n```python\nservice.log(\"hey there - I am in Asset \"+mbo.getString(\"assetnum\"))\n```\n\nYou bind this script to ASSET Init event using Object launch point. When you initialize assets, for example, from the list table in ASSET application, you will see this log in real time. \nHowever, other scripts would not show any logs as the logger is set only for the ABCD script.\n\nIdeally, there should be some form of support for remote debugging using breakpoints from an IDE. Currently, there is no support.\nThere is remote debugging support for Nashorn js from IDEs like IntelliJ but this is not verified.\n\n\n## Logs from scripting framework\n\nThe scripting framework logs cover script loading, initialization, execution time\nand so forth. To see the values being passed received by script variables, set the\nautoscript logger to 'DEBUG', apply the logging settings and run the script\nconfiguration. Variable values should be output to the log file or system console.\nAs a general rule of thumb, you can set the autoscript logger to INFO during script\ndevelopment or debugging time and set individual scripts log level to INFO too,\nwhich will push the script specific print statements to the log file.\nThe following list of log information is automatically generated at the DEBUG level\nfrom the scripting framework.\n\n- Launch point name and script name that are about to be executed.\n\n- Script execution time as time elapsed between start and end of script\n  execution.\n- Application name, logged in use name, MBO name, MBO unique ID\n  values always injected as implicit data to the script. The script author may or may not\n  use these.\n- Variable values passed into the script based on variable bindings. These are variables that are sourced from MBO attribute, MAXVAR, system property, or\n  literal.\n\n\nTo redirect your scripting logs to a separate log file:\n\n1. Go to **Logging** app.\n2. Click **Manage Appenders** from the **Select Action** menu.\n3. Click **New Row** in the **Manage Appenders** popup dialog.\n4. Specify details as:\n   - Appender = ScriptingOnly [or any appropriate name you choose]\n   \n   - Appender Implementation Class = psdi.util.logging.MXFileAppender [you\n     can select this from the value list]\n   \n   - File Name = autoscript.log [or any appropriate file name you choose]\n   \n   - Accept all other defaults.\n5. Save the new appender by clicking **OK**.\n6. Locate 'autoscript' logger in the **Root Loggers** section of the application.\n7. Click the **Manage Appenders** icon to the right of **Appenders** field in the\n**Details** section for 'autoscript' logger.\n8. Select only the appender you created earlier, which is ScriptingOnly, and de-select\nany other appender previously associated with this logger.\n9. Click **OK** to save the new association. From the **Select Action** menu click\n**Apply** for the log settings to take effect.\n\n\n\n\n\n\n\n\n\n","type":"Mdx","contentDigest":"185285ec182e9621f33a1e7bcc2903cb","owner":"gatsby-plugin-mdx","counter":197},"frontmatter":{"title":"Debugging a script"},"exports":{},"rawBody":"---\ntitle: Debugging a script\n---\n\n## Debugging a script\nBy default, all script related logging is done using the autoscript logger. Each script\ncan be configured at different log levels like DEBUG,INFO,ERROR, and so on. The default\nsetup for any script is at ERROR, which can be changed from management\napplication or at the time of creation in the second step of the wizard.\nIf you were to debug the following script:\n\n```python\ny=float(iplr)+float(olr)\nif y!=float(plr):\n  pnr=str(y)\n```\n\nYou put the following debug statements: \n\n\n```python\nprint \"iplr=\"+iplr\nprint \"olr=\"+olr\ny=float(iplr)+float(olr)\nprint \"y=\"+y\nif y!=float(plr):\n  pnr=str(y)\n  print “pnr=”+pnr\n```\n\nYou must make sure that the log level for the autoscript logger is set to\nthe log level of the script. For example, set both of them to INFO.\nThis will result in the print statements to show up in your systemout log. If\nrequired, the log statements produced by this logger can be re-directed to a\ndedicated log file holding only script-related log statements. The syntax\nof the print statement depends upon which language the script is being written\nwith. Also, if the \"autoscript\" logger is set to ERROR level logs only, then the print\nstatements inside the automation script will not be written to a log file. \n\nThis way of logging is not ideal as the scripting framework would not log this in real time. \nIt will log it after the script execution completes. \nThis does not create an ideal debugging session, especially for long running scripts. \nScript developers should leverage the `service.log` set of APIs to log real time. \nRecent enhancements allow the logger to be set at the individual script scope. \nAll you should do is create a logger with the script name and set the log level accordingly. \nIn the following screenshot, you create a logger for a script called ABCD and set the log level to INFO.\n\n\n![Script Logger](scriptlog.jpg)\n\nThe base autoscript logger is set at ERROR level.\nNow, set the script ABC log level to INFO from the Automation Script application. Use the following script code:\n\n```python\nservice.log(\"hey there - I am in Asset \"+mbo.getString(\"assetnum\"))\n```\n\nYou bind this script to ASSET Init event using Object launch point. When you initialize assets, for example, from the list table in ASSET application, you will see this log in real time. \nHowever, other scripts would not show any logs as the logger is set only for the ABCD script.\n\nIdeally, there should be some form of support for remote debugging using breakpoints from an IDE. Currently, there is no support.\nThere is remote debugging support for Nashorn js from IDEs like IntelliJ but this is not verified.\n\n\n## Logs from scripting framework\n\nThe scripting framework logs cover script loading, initialization, execution time\nand so forth. To see the values being passed received by script variables, set the\nautoscript logger to 'DEBUG', apply the logging settings and run the script\nconfiguration. Variable values should be output to the log file or system console.\nAs a general rule of thumb, you can set the autoscript logger to INFO during script\ndevelopment or debugging time and set individual scripts log level to INFO too,\nwhich will push the script specific print statements to the log file.\nThe following list of log information is automatically generated at the DEBUG level\nfrom the scripting framework.\n\n- Launch point name and script name that are about to be executed.\n\n- Script execution time as time elapsed between start and end of script\n  execution.\n- Application name, logged in use name, MBO name, MBO unique ID\n  values always injected as implicit data to the script. The script author may or may not\n  use these.\n- Variable values passed into the script based on variable bindings. These are variables that are sourced from MBO attribute, MAXVAR, system property, or\n  literal.\n\n\nTo redirect your scripting logs to a separate log file:\n\n1. Go to **Logging** app.\n2. Click **Manage Appenders** from the **Select Action** menu.\n3. Click **New Row** in the **Manage Appenders** popup dialog.\n4. Specify details as:\n   - Appender = ScriptingOnly [or any appropriate name you choose]\n   \n   - Appender Implementation Class = psdi.util.logging.MXFileAppender [you\n     can select this from the value list]\n   \n   - File Name = autoscript.log [or any appropriate file name you choose]\n   \n   - Accept all other defaults.\n5. Save the new appender by clicking **OK**.\n6. Locate 'autoscript' logger in the **Root Loggers** section of the application.\n7. Click the **Manage Appenders** icon to the right of **Appenders** field in the\n**Details** section for 'autoscript' logger.\n8. Select only the appender you created earlier, which is ScriptingOnly, and de-select\nany other appender previously associated with this logger.\n9. Click **OK** to save the new association. From the **Select Action** menu click\n**Apply** for the log settings to take effect.\n\n\n\n\n\n\n\n\n\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/troubleshooting/debugscript.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}