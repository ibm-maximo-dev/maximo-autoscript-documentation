{
    "componentChunkName": "component---src-pages-troubleshooting-debugscript-mdx",
    "path": "/troubleshooting/debugscript/",
    "result": {"pageContext":{"frontmatter":{"title":"Debugging A Script"},"relativePagePath":"/troubleshooting/debugscript.mdx","titleType":"append","MdxNode":{"id":"9a7aa7dc-3e89-596f-bcdc-0b75bd7ba090","children":[],"parent":"45a08dda-d3f6-56ce-9f9e-83f5449a703b","internal":{"content":"---\ntitle: Debugging A Script\n---\n\n## Debugging A Script\nBy default all script related logging is done via the autoscript logger. Every script\ncan be configured at different log levels – DEBUG,INFO,ERROR etc. The default\nsetup for any script is at ERROR which can be changed from management\napplication or at the time of creation [in the 2nd step of the wizard].\nIf we were to just debug the script below\n\n```python\ny=float(iplr)+float(olr)\nif y!=float(plr):\n  pnr=str(y)\n```\n\nWe can put some debug statements like \n\n\n```python\nprint \"iplr=\"+iplr\nprint \"olr=\"+olr\ny=float(iplr)+float(olr)\nprint \"y=\"+y\nif y!=float(plr):\n  pnr=str(y)\n  print “pnr=”+pnr\n```\n\nNext we need to make sure that the log level for the autoscript logger is set to\nthe log level of the script. For example set both of them to INFO.\nThis will result in the print statements to show up in your systemout log. If\nrequired, the log statements produced by this logger can be re-directed to a\ndedicated log file holding only script-related log statements. Note that the syntax\nof the print statement depends upon which language the script is being written\nwith. Also if the \"autoscript\" logger is set to ERROR level logs only, then the print\nstatements inside the automation script will not be written out to log file. \n\nAs explained earlier, this way of logging is not ideal as the scripting framework would not log this in real time. \nIt will log it after the script execution completes. \nThis does not create an ideal debugging session specially for long running scripts. \nScript developers should leverage the `service.log` set of apis to log real time. \nNote that recent enhancements allow the logger to be set at the individual script scope. \nAll we need to do is to create a logger with the script name and set the log level accordingly. \nIn the screen shot below, we create a logger for a script called ABCD and set the log level to INFO.\n\n\n![Script Logger](scriptlog.jpg)\n\nNote that the base autoscript logger is set at ERROR level.\nWe next set the script ABC log level to INFO from the scripting application. The script code is shown below:\n\n```python\nservice.log(\"hey there - I am in Asset \"+mbo.getString(\"assetnum\"))\n```\n\nWe bind this script to ASSET Init event using Object Launchpoint. When we initialize assets (say from the list table in ASSET application) we will see this log real time. \nBut other scripts would not show any logs as the logger is set for that ABCD script only.\n\nIdeally one would expect some form of support for remote debugging using breakpoints from an IDE. At this point there is no support for that.\nWe are aware of remote debugging support for Nashorn js from IDE's like IntelliJ but we have not verified those in our labs yet.\n\n\n## Logs from Scripting Framework\n\nThe scripting framework logs cover script loading, initialization, execution time\nand so forth. To see the values being passed received by script variables, set the\nautoscript logger to 'DEBUG', apply the logging settings and run the script\nconfiguration. Variable values should be output to the log file or system console.\nAs a general rule of thumb we can set the autoscript logger to INFO during script\ndevelopment/debugging time and set inidvidual scripts log level to INFO too\nwhich will push the script specific print statements to the log file.\nBelow is the list of log information automatically generated at the DEBUG level\nfrom the scripting framework.\n\n\n1. Launch point name and script name that are about to be executed\n2. Script execution time (as time elapsed between start and end of script\nexecution)\n3. Application name, logged in use name, MBO name, MBO unique ID\nvalues always injected as implicit data to the script - script author may or may not\nuse these\n4. Variable values passed into the script based on variable bindings\n(variables that are sourced from MBO attribute, MAXVAR, system property or\nliteral)\n\n\nTo redirect your scripting logs to a separate log file follow the steps below.\n\n1. Go to Logging app.\n2. Click Manage Appenders from the Select Action menu.\n3. Click New Row in the Manage Appenders popup dialog.\n4. Fill in Details as:\n   1. Appender = ScriptingOnly [or any appropriate name you choose]\n   2. Appender Implementation Class = psdi.util.logging.MXFileAppender [you\n      can select this from the value list]\n   3. File Name = autoscript.log [or any appropriate file name you choose]\n   4. Accept all other defaults.\n5. Save the new appender by clicking OK.\n6. Locate 'autoscript' logger in the Root Loggers section of the application.\n7. Click the Manage Appenders icon to the right of Appenders field in the\nDetails section for 'autoscript' logger.\n8. Select only the appender you created earlier (ScriptingOnly), and de-select\nany other appender previously associated with this logger.\n9. Click OK to save the new association. From the Select Action menu click\n\"Apply\" for the log settings to take effect.\n\n\n\n\n\n\n\n\n\n","type":"Mdx","contentDigest":"e8cd944eccddbec863740df75c4652f4","owner":"gatsby-plugin-mdx","counter":176},"frontmatter":{"title":"Debugging A Script"},"exports":{},"rawBody":"---\ntitle: Debugging A Script\n---\n\n## Debugging A Script\nBy default all script related logging is done via the autoscript logger. Every script\ncan be configured at different log levels – DEBUG,INFO,ERROR etc. The default\nsetup for any script is at ERROR which can be changed from management\napplication or at the time of creation [in the 2nd step of the wizard].\nIf we were to just debug the script below\n\n```python\ny=float(iplr)+float(olr)\nif y!=float(plr):\n  pnr=str(y)\n```\n\nWe can put some debug statements like \n\n\n```python\nprint \"iplr=\"+iplr\nprint \"olr=\"+olr\ny=float(iplr)+float(olr)\nprint \"y=\"+y\nif y!=float(plr):\n  pnr=str(y)\n  print “pnr=”+pnr\n```\n\nNext we need to make sure that the log level for the autoscript logger is set to\nthe log level of the script. For example set both of them to INFO.\nThis will result in the print statements to show up in your systemout log. If\nrequired, the log statements produced by this logger can be re-directed to a\ndedicated log file holding only script-related log statements. Note that the syntax\nof the print statement depends upon which language the script is being written\nwith. Also if the \"autoscript\" logger is set to ERROR level logs only, then the print\nstatements inside the automation script will not be written out to log file. \n\nAs explained earlier, this way of logging is not ideal as the scripting framework would not log this in real time. \nIt will log it after the script execution completes. \nThis does not create an ideal debugging session specially for long running scripts. \nScript developers should leverage the `service.log` set of apis to log real time. \nNote that recent enhancements allow the logger to be set at the individual script scope. \nAll we need to do is to create a logger with the script name and set the log level accordingly. \nIn the screen shot below, we create a logger for a script called ABCD and set the log level to INFO.\n\n\n![Script Logger](scriptlog.jpg)\n\nNote that the base autoscript logger is set at ERROR level.\nWe next set the script ABC log level to INFO from the scripting application. The script code is shown below:\n\n```python\nservice.log(\"hey there - I am in Asset \"+mbo.getString(\"assetnum\"))\n```\n\nWe bind this script to ASSET Init event using Object Launchpoint. When we initialize assets (say from the list table in ASSET application) we will see this log real time. \nBut other scripts would not show any logs as the logger is set for that ABCD script only.\n\nIdeally one would expect some form of support for remote debugging using breakpoints from an IDE. At this point there is no support for that.\nWe are aware of remote debugging support for Nashorn js from IDE's like IntelliJ but we have not verified those in our labs yet.\n\n\n## Logs from Scripting Framework\n\nThe scripting framework logs cover script loading, initialization, execution time\nand so forth. To see the values being passed received by script variables, set the\nautoscript logger to 'DEBUG', apply the logging settings and run the script\nconfiguration. Variable values should be output to the log file or system console.\nAs a general rule of thumb we can set the autoscript logger to INFO during script\ndevelopment/debugging time and set inidvidual scripts log level to INFO too\nwhich will push the script specific print statements to the log file.\nBelow is the list of log information automatically generated at the DEBUG level\nfrom the scripting framework.\n\n\n1. Launch point name and script name that are about to be executed\n2. Script execution time (as time elapsed between start and end of script\nexecution)\n3. Application name, logged in use name, MBO name, MBO unique ID\nvalues always injected as implicit data to the script - script author may or may not\nuse these\n4. Variable values passed into the script based on variable bindings\n(variables that are sourced from MBO attribute, MAXVAR, system property or\nliteral)\n\n\nTo redirect your scripting logs to a separate log file follow the steps below.\n\n1. Go to Logging app.\n2. Click Manage Appenders from the Select Action menu.\n3. Click New Row in the Manage Appenders popup dialog.\n4. Fill in Details as:\n   1. Appender = ScriptingOnly [or any appropriate name you choose]\n   2. Appender Implementation Class = psdi.util.logging.MXFileAppender [you\n      can select this from the value list]\n   3. File Name = autoscript.log [or any appropriate file name you choose]\n   4. Accept all other defaults.\n5. Save the new appender by clicking OK.\n6. Locate 'autoscript' logger in the Root Loggers section of the application.\n7. Click the Manage Appenders icon to the right of Appenders field in the\nDetails section for 'autoscript' logger.\n8. Select only the appender you created earlier (ScriptingOnly), and de-select\nany other appender previously associated with this logger.\n9. Click OK to save the new association. From the Select Action menu click\n\"Apply\" for the log settings to take effect.\n\n\n\n\n\n\n\n\n\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/troubleshooting/debugscript.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}