{
    "componentChunkName": "component---src-pages-otherlaunch-formulafunc-mdx",
    "path": "/otherlaunch/formulafunc/",
    "result": {"pageContext":{"frontmatter":{"title":"Formula Functions"},"relativePagePath":"/otherlaunch/formulafunc.mdx","titleType":"append","MdxNode":{"id":"da8aeb9a-376b-5c59-93d0-2d2559119bf9","children":[],"parent":"9c34612d-aff0-5524-8444-9d64050a1dea","internal":{"content":"---\ntitle: Formula Functions\n---\n\nMaximo Formula's provide an excel like expression library to calculate numeric values from Mbo's. \nThe framework provides a bunch of standard functions out of the box. Scripting framework provide customers a way to create custom functions to extend the library of built-in functions. \nWe will show case an example where we add the standard deviation function using scripting. Setup steps are listed below:\n\n\n\n1. 1.Write the formula script code (python sample). This leverages the apache math library to calculate the standard deviation.\n\n\n\n```python\nfrom org.apache.commons.math3.stat.descriptive import DescriptiveStatistics\nfrom java.lang import Math\n\nrelation = ctx.getExpression().getCalculatedValue(params[0])\nattr = ctx.getExpression().getCalculatedValue(params[1])\ndstats = DescriptiveStatistics()\nworkOrders = mbo.getMboSet(relation)\nwo = workOrders.moveFirst()\nwhile wo is not None:\n  cost = wo.getDouble(attr)\n  dstats.addValue(cost)\n  wo = workOrders.moveNext()\n\nstd = dstats.getStandardDeviation()\nservice.log(str(std))\nevalresult = std\n```  \n\n\nBelow is the list of implicit variables supported by this script point:  \n\n\n|Variable|Purpose|\n|:--------------|:---------------------------------------------------------|\n|exp|an instance of com.ibm.tivoli.maximo.expression.Expression which is a handle to the parsed formula expression instance.|\n|ctx|an instance of this Function com.ibm.tivoli.maximo.expression.ScriptFunction.|\n|mbo|The mbo in context for the Formula.|\n|params|The input parameters.|\n\n\n2. 2.Add a new Formula function with the implementation type as \"script\" and the Class name or script name as the name of the script (in uppercase).  \n\n\n\n![Register Function](ScriptFunc.jpg)\n\n\n3. 3.Add/Modify Object (Or Attribute) Formula. The formula for this sample is on Asset object.  \n\n\n![Sample Formula](ScriptFunc.jpg)\n\n\nA way to test this would be to make a rest api call as shown below:\n\n\n```\nGET /oslc/os/mxapiasset?lean=1&oslc.select=assetnum,siteid,exp.assetwocoststd&oslc.where=assetnum=\"11430\"\n```\n\nThe picture below shows a sample result:\n\n\n![Formula REST](formularest.jpg)\n","type":"Mdx","contentDigest":"b4ab7f18a60352e748bb424f27aefb18","owner":"gatsby-plugin-mdx","counter":170},"frontmatter":{"title":"Formula Functions"},"exports":{},"rawBody":"---\ntitle: Formula Functions\n---\n\nMaximo Formula's provide an excel like expression library to calculate numeric values from Mbo's. \nThe framework provides a bunch of standard functions out of the box. Scripting framework provide customers a way to create custom functions to extend the library of built-in functions. \nWe will show case an example where we add the standard deviation function using scripting. Setup steps are listed below:\n\n\n\n1. 1.Write the formula script code (python sample). This leverages the apache math library to calculate the standard deviation.\n\n\n\n```python\nfrom org.apache.commons.math3.stat.descriptive import DescriptiveStatistics\nfrom java.lang import Math\n\nrelation = ctx.getExpression().getCalculatedValue(params[0])\nattr = ctx.getExpression().getCalculatedValue(params[1])\ndstats = DescriptiveStatistics()\nworkOrders = mbo.getMboSet(relation)\nwo = workOrders.moveFirst()\nwhile wo is not None:\n  cost = wo.getDouble(attr)\n  dstats.addValue(cost)\n  wo = workOrders.moveNext()\n\nstd = dstats.getStandardDeviation()\nservice.log(str(std))\nevalresult = std\n```  \n\n\nBelow is the list of implicit variables supported by this script point:  \n\n\n|Variable|Purpose|\n|:--------------|:---------------------------------------------------------|\n|exp|an instance of com.ibm.tivoli.maximo.expression.Expression which is a handle to the parsed formula expression instance.|\n|ctx|an instance of this Function com.ibm.tivoli.maximo.expression.ScriptFunction.|\n|mbo|The mbo in context for the Formula.|\n|params|The input parameters.|\n\n\n2. 2.Add a new Formula function with the implementation type as \"script\" and the Class name or script name as the name of the script (in uppercase).  \n\n\n\n![Register Function](ScriptFunc.jpg)\n\n\n3. 3.Add/Modify Object (Or Attribute) Formula. The formula for this sample is on Asset object.  \n\n\n![Sample Formula](ScriptFunc.jpg)\n\n\nA way to test this would be to make a rest api call as shown below:\n\n\n```\nGET /oslc/os/mxapiasset?lean=1&oslc.select=assetnum,siteid,exp.assetwocoststd&oslc.where=assetnum=\"11430\"\n```\n\nThe picture below shows a sample result:\n\n\n![Formula REST](formularest.jpg)\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/otherlaunch/formulafunc.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}