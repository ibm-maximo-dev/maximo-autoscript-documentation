{
    "componentChunkName": "component---src-pages-otherlaunch-conditionlaunch-mdx",
    "path": "/otherlaunch/conditionlaunch/",
    "result": {"pageContext":{"frontmatter":{"title":"Condition Launchpoint"},"relativePagePath":"/otherlaunch/conditionlaunch.mdx","titleType":"append","MdxNode":{"id":"9e596550-2d76-57a4-865b-067827227a1f","children":[],"parent":"16362969-d565-5b2a-905c-ff28c35b4f8e","internal":{"content":"---\ntitle: Condition Launchpoint\n---\n\n## Condition Launchpoint\nMaximo conditions are [based on the javacc parser] used in Workflows, Conditional Uis etc. \nOne aspect of custom conditions lets you write up a condition using Java code in case the condition is complicated enough\nto be encoded using the javacc based condition grammar. This launch point lets you avoid that Java coding and enables you to attach a scripted condition to\nthese Maximo components [Workflows/Conditional UIs].  \n\n\nLets take an example to understand it better. The use case is to add a condition to the workflow that would change the status of Asset from not ready to\noperating if the Asset has spareparts quantity total as greater than 10 and the asset vendor is not null.  \n\n\nAs before we would launch the wizard for the condition launch point from the Autoscript application [List Tab → drop down actions → Create → Create Script\nwith Custom Condition Launch Point] and like other's this is also a 3 step process.\n\n\n![Condition Launchpoint UI](condlp.jpg)\n\n\nStep 1 is ofcourse defining the launch point. As we can see this is an entirely\nnew script.  \n\n\n![Condition Launchpoint UI page 1](condlp1.jpg)  \n\n\nStep 2 will be to define and bind the variables. This script will involve 2 variables\nas listed below:\n\n\n|Variable name|Variable type|Binding\n|:-----------|:------------|:-----------------------------|\n|vend|IN|vendor|\n|qtys|IN|sparepart.quantity*|\n\n\nStep 3 would be to define the script. The script would look like as below:\n\n\n```python\nif vend is not None and qtys is not None and sum(qtys)>10:\n  evalresult=true\n```\n\nThis evalresult as explained earlier is an implicit variable which carries the\nboolean result of the condition evaluation. Its predefined and is always there for\ncondition launch points.\n\n\nAt the end of the wizard process when we submit the design – it would create a\nscript with the logic as above. But the work is not done yet as we now have to\nattach the script to the actual condition which unfortunately is still a manual\nprocess. The steps are listed below:  \n\n\n1. create a condition node in the workflow designer.\n2. Set the title of the condition node to `scriptname:launchpointname`\nwhere script name and the launch point name would point to the\nscript+launch point pair just created.\n3. Bring up the the condition node properties dialog [as shown below in the\nscreen shot] to set the condition type as custom and set the custom Java class\nto com.ibm.tivoli.maximo.script.ScriptCustomCondition which is the predefined proxy for the scripted conditions.\n4. Save and activate the workflow.\n\n\n![Condition node properties](cnp.jpg)  \n\n\nOne thing to note here is the title field value. This value is mapped to the\nWFNODE Mbo's title attribute which has a limit of 10 characters. And as you can\nsee that the title is holding a pointer to the script launch point pair by appending\nthe script name and the launch point name with the “:” as separator. Each of\nscript name and launch point name can be 20 characters [out of the box setting].\nSo we do have a length issue here and at this point there is not much we can do\nbut to keep the names of the script and launch point limited to 4 characters at\nmaximum. Also if the script has one and only launch point we can just omit the\nlaunch point name from the title and just do with the script name. If all these\nhave made you wonder why it was done this way as opposed to keeping an entry\nin the WFNODE table for the script name and the launch point name the answer\nis pretty simple – we just did not want to modify any existing Maximo artifacts.  \n\n\nThe condition in the example was trivial and is meant to demonstrate the “how to\ndo custom conditions using scripting” aspect. As you must have figured out – we\ncan harness all the powers of scripting in this launch point and do all complicated\nevaluations needed to come out with the boolean result [evalresult] for the\nevaluation.","type":"Mdx","contentDigest":"f891ed496eec9d27cf225dd394922f9f","owner":"gatsby-plugin-mdx","counter":171},"frontmatter":{"title":"Condition Launchpoint"},"exports":{},"rawBody":"---\ntitle: Condition Launchpoint\n---\n\n## Condition Launchpoint\nMaximo conditions are [based on the javacc parser] used in Workflows, Conditional Uis etc. \nOne aspect of custom conditions lets you write up a condition using Java code in case the condition is complicated enough\nto be encoded using the javacc based condition grammar. This launch point lets you avoid that Java coding and enables you to attach a scripted condition to\nthese Maximo components [Workflows/Conditional UIs].  \n\n\nLets take an example to understand it better. The use case is to add a condition to the workflow that would change the status of Asset from not ready to\noperating if the Asset has spareparts quantity total as greater than 10 and the asset vendor is not null.  \n\n\nAs before we would launch the wizard for the condition launch point from the Autoscript application [List Tab → drop down actions → Create → Create Script\nwith Custom Condition Launch Point] and like other's this is also a 3 step process.\n\n\n![Condition Launchpoint UI](condlp.jpg)\n\n\nStep 1 is ofcourse defining the launch point. As we can see this is an entirely\nnew script.  \n\n\n![Condition Launchpoint UI page 1](condlp1.jpg)  \n\n\nStep 2 will be to define and bind the variables. This script will involve 2 variables\nas listed below:\n\n\n|Variable name|Variable type|Binding\n|:-----------|:------------|:-----------------------------|\n|vend|IN|vendor|\n|qtys|IN|sparepart.quantity*|\n\n\nStep 3 would be to define the script. The script would look like as below:\n\n\n```python\nif vend is not None and qtys is not None and sum(qtys)>10:\n  evalresult=true\n```\n\nThis evalresult as explained earlier is an implicit variable which carries the\nboolean result of the condition evaluation. Its predefined and is always there for\ncondition launch points.\n\n\nAt the end of the wizard process when we submit the design – it would create a\nscript with the logic as above. But the work is not done yet as we now have to\nattach the script to the actual condition which unfortunately is still a manual\nprocess. The steps are listed below:  \n\n\n1. create a condition node in the workflow designer.\n2. Set the title of the condition node to `scriptname:launchpointname`\nwhere script name and the launch point name would point to the\nscript+launch point pair just created.\n3. Bring up the the condition node properties dialog [as shown below in the\nscreen shot] to set the condition type as custom and set the custom Java class\nto com.ibm.tivoli.maximo.script.ScriptCustomCondition which is the predefined proxy for the scripted conditions.\n4. Save and activate the workflow.\n\n\n![Condition node properties](cnp.jpg)  \n\n\nOne thing to note here is the title field value. This value is mapped to the\nWFNODE Mbo's title attribute which has a limit of 10 characters. And as you can\nsee that the title is holding a pointer to the script launch point pair by appending\nthe script name and the launch point name with the “:” as separator. Each of\nscript name and launch point name can be 20 characters [out of the box setting].\nSo we do have a length issue here and at this point there is not much we can do\nbut to keep the names of the script and launch point limited to 4 characters at\nmaximum. Also if the script has one and only launch point we can just omit the\nlaunch point name from the title and just do with the script name. If all these\nhave made you wonder why it was done this way as opposed to keeping an entry\nin the WFNODE table for the script name and the launch point name the answer\nis pretty simple – we just did not want to modify any existing Maximo artifacts.  \n\n\nThe condition in the example was trivial and is meant to demonstrate the “how to\ndo custom conditions using scripting” aspect. As you must have figured out – we\ncan harness all the powers of scripting in this launch point and do all complicated\nevaluations needed to come out with the boolean result [evalresult] for the\nevaluation.","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/otherlaunch/conditionlaunch.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}