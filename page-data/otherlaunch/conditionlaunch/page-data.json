{
    "componentChunkName": "component---src-pages-otherlaunch-conditionlaunch-mdx",
    "path": "/otherlaunch/conditionlaunch/",
    "result": {"pageContext":{"frontmatter":{"title":"Condition launch point"},"relativePagePath":"/otherlaunch/conditionlaunch.mdx","titleType":"append","MdxNode":{"id":"9e596550-2d76-57a4-865b-067827227a1f","children":[],"parent":"16362969-d565-5b2a-905c-ff28c35b4f8e","internal":{"content":"---\ntitle: Condition launch point\n---\n\n## Condition launch point\nMaximo conditions are based on the javacc parser used in Workflows, Conditional UIs and others. \nOne aspect of custom conditions lets you write a condition using Java code, in case the condition is complicated enough\nto be encoded using the javacc based condition grammar. This launch point lets you avoid  Java coding and enables you to attach a scripted condition to\nWorkflows and Conditional UIs.  \n\nFor example, the use case is to add a condition to the workflow that would change the status of Asset from \"not ready\" to\n\"operating\" if the Asset has spareparts quantity total as greater than 10 and the asset vendor is not null.  \n\nLaunch the wizard for the condition launch point from the Automation Scripts application:\n\n**List Tab → Drop down actions → Create → Create Script with Custom Condition Launch Point**\n\n\n![Condition Launchpoint UI](condlp.jpg)\n\n1. Define the launch point using a new script.\n\n\n![Condition Launchpoint UI page 1](condlp1.jpg)  \n\n2. Define and bind the variables. This script will use the following two variables.\n\n\n|Variable name|Variable type|Binding\n|:-----------|:------------|:-----------------------------|\n|vend|IN|vendor|\n|qtys|IN|sparepart.quantity*|\n\n3. Define the script. The following script is what you should use:\n\n\n```python\nif vend is not None and qtys is not None and sum(qtys)>10:\n  evalresult=true\n```\n\nThis evalresult is an implicit variable, which carries the\nboolean result of the condition evaluation. It is predefined and is always there for\ncondition launch points.\n\nAt the end of the wizard process when you submit the design, it will create a\nscript with the logic you defined. You also have to\nattach the script to the actual condition which is still a manual\nprocess. Follow the steps:\n\n\n1. Create a condition node in the workflow designer.\n2. Set the title of the condition node to `scriptname:launchpointname`\nwhere script name and the launch point name would point to the\nscript+launch point pair just created.\n3. Go to the **Condition Node Properties** dialog  to set the condition type as custom and set the custom Java class\nto com.ibm.tivoli.maximo.script.ScriptCustomCondition, which is the predefined proxy for the scripted conditions.\n4. Save and activate the workflow.\n\n\n![Condition node properties](cnp.jpg)  \n\nThe title field value is mapped to the\nWFNODE MBO's title attribute, which has a limit of 10 characters. The title is holding a pointer to the script launch point pair by appending\nthe script name and the launch point name with the “:” as separator. Both the\nscript name and launch point name can be 20 characters which is a default setting.\nThere is a length issue here and at this point there is not much you can do\nbut use a maximum of four characters for the script and launch point name. Also, if the script has a single launch point, you can omit the\nlaunch point name from the title and use only the script name. The reason to do it this way as opposed to keeping an entry\nin the WFNODE table for the script name and the launch point name is to not modify any existing Maximo artifacts.  \n\n\nThe condition in the example was trivial and meant to demonstrate the “how to\ndo custom conditions using scripting” aspect. You\ncan harness all the powers of scripting in this launch point and do all complicated\nevaluations needed to get the boolean result or evalresult for the\nevaluation.","type":"Mdx","contentDigest":"cabbc4786b1b3d43c84348ad69e2863d","owner":"gatsby-plugin-mdx","counter":189},"frontmatter":{"title":"Condition launch point"},"exports":{},"rawBody":"---\ntitle: Condition launch point\n---\n\n## Condition launch point\nMaximo conditions are based on the javacc parser used in Workflows, Conditional UIs and others. \nOne aspect of custom conditions lets you write a condition using Java code, in case the condition is complicated enough\nto be encoded using the javacc based condition grammar. This launch point lets you avoid  Java coding and enables you to attach a scripted condition to\nWorkflows and Conditional UIs.  \n\nFor example, the use case is to add a condition to the workflow that would change the status of Asset from \"not ready\" to\n\"operating\" if the Asset has spareparts quantity total as greater than 10 and the asset vendor is not null.  \n\nLaunch the wizard for the condition launch point from the Automation Scripts application:\n\n**List Tab → Drop down actions → Create → Create Script with Custom Condition Launch Point**\n\n\n![Condition Launchpoint UI](condlp.jpg)\n\n1. Define the launch point using a new script.\n\n\n![Condition Launchpoint UI page 1](condlp1.jpg)  \n\n2. Define and bind the variables. This script will use the following two variables.\n\n\n|Variable name|Variable type|Binding\n|:-----------|:------------|:-----------------------------|\n|vend|IN|vendor|\n|qtys|IN|sparepart.quantity*|\n\n3. Define the script. The following script is what you should use:\n\n\n```python\nif vend is not None and qtys is not None and sum(qtys)>10:\n  evalresult=true\n```\n\nThis evalresult is an implicit variable, which carries the\nboolean result of the condition evaluation. It is predefined and is always there for\ncondition launch points.\n\nAt the end of the wizard process when you submit the design, it will create a\nscript with the logic you defined. You also have to\nattach the script to the actual condition which is still a manual\nprocess. Follow the steps:\n\n\n1. Create a condition node in the workflow designer.\n2. Set the title of the condition node to `scriptname:launchpointname`\nwhere script name and the launch point name would point to the\nscript+launch point pair just created.\n3. Go to the **Condition Node Properties** dialog  to set the condition type as custom and set the custom Java class\nto com.ibm.tivoli.maximo.script.ScriptCustomCondition, which is the predefined proxy for the scripted conditions.\n4. Save and activate the workflow.\n\n\n![Condition node properties](cnp.jpg)  \n\nThe title field value is mapped to the\nWFNODE MBO's title attribute, which has a limit of 10 characters. The title is holding a pointer to the script launch point pair by appending\nthe script name and the launch point name with the “:” as separator. Both the\nscript name and launch point name can be 20 characters which is a default setting.\nThere is a length issue here and at this point there is not much you can do\nbut use a maximum of four characters for the script and launch point name. Also, if the script has a single launch point, you can omit the\nlaunch point name from the title and use only the script name. The reason to do it this way as opposed to keeping an entry\nin the WFNODE table for the script name and the launch point name is to not modify any existing Maximo artifacts.  \n\n\nThe condition in the example was trivial and meant to demonstrate the “how to\ndo custom conditions using scripting” aspect. You\ncan harness all the powers of scripting in this launch point and do all complicated\nevaluations needed to get the boolean result or evalresult for the\nevaluation.","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/otherlaunch/conditionlaunch.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}