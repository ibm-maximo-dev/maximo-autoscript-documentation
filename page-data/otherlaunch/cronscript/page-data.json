{
    "componentChunkName": "component---src-pages-otherlaunch-cronscript-mdx",
    "path": "/otherlaunch/cronscript/",
    "result": {"pageContext":{"frontmatter":{"title":"Scripting cron tasks in Maximo"},"relativePagePath":"/otherlaunch/cronscript.mdx","titleType":"append","MdxNode":{"id":"7f18fbe1-5e3d-5497-a9cd-072ddcb79ae0","children":[],"parent":"30b53bca-bdda-5851-9c59-8ec0f19a6278","internal":{"content":"---\ntitle: Scripting cron tasks in Maximo\n---\n\nYou can write scripts for cron tasks from Maximo 7.6. It follows the same principle as the endpoint\nhandler. The cron class, com.ibm.tivoli.maximo.script.ScriptCrontask helps achieve this. You must register that class as a new crontask in the crontask application. You must then create an instance of it and set the “scriptname” property to the name of the script that you want this task to run. Set the schedule and  define the script. You can now run this newly defined script with the crontasks. It is no\ndifferent from any other crontask and you can activate or deactivate the task or change the\nschedule as you would do in any other cron task.\n\n\nYou must do this even if you already have an escalation, which is a crontask based on a Maximo object. This is because you may be required to schedule jobs that are not just based off Maximo objects. In those cases, these crontask based scripts would come in handy.\n\nThe following steps develop a cron script to log an error when the count of maxsessions exceeds a\nconfigured limit.\n\n1. Register the script crontask definition. For that you will use the Crontask app and the class name would be com.ibm.tivoli.maximo.script.ScriptCrontask. You will also create a cron task instance.\n   In that instance, you can set the frequency to 30 sec.\n   You can set the SCRPTNAME param value to SESSIONCOUNT. This will create\n   a script named SESSIONCOUNT to do the job.\n\n2. Create the script SESSIONCOUNT. The following sample script is in py. The\n   \"runasUserInfo\" implicit var will hold the userinfo for the cron job.\n\n\n```python\nfrom psdi.server import MXServer\ncnt = MXServer.getMXServer().getMboSet(\"maxsession\",runAsUserInfo).count();\nif cnt>1:\n  service.logError(\"cnt exceeds 1::\"+str(cnt))\n```\n\n3. Activate the crontask instance. You should wait a minute or so for the task to start.\n   You can use another browser instance to login to Maximo to create another maxsesson\n   record. That is when you can see that log that says \"cnt exceeds 1::\".\n\n4. You had hard coded the count limit. In this step you can softcode this by leveraging the\n   SCRIPTARG parameter in the Crontask by setting it to 1. Save and reload\n   the task.\n\n5. Modify the script to leverage that SCRIPTARG parameter using the implicit var called\n   \"arg\" .\n\n\n```python\nfrom psdi.server import MXServer\nargval = int(arg)\ncnt = MXServer.getMXServer().getMboSet(\"maxsession\",runAsUserInfo).count();\nif cnt>argval:\n  service.logError(\"cnt exceeds 1::\"+str(cnt))\n```\n\n6. Repeat step 3 to check if you get the error log.\n\n","type":"Mdx","contentDigest":"edd25ea54750eb1e425f551d35edb112","owner":"gatsby-plugin-mdx","counter":214},"frontmatter":{"title":"Scripting cron tasks in Maximo"},"exports":{},"rawBody":"---\ntitle: Scripting cron tasks in Maximo\n---\n\nYou can write scripts for cron tasks from Maximo 7.6. It follows the same principle as the endpoint\nhandler. The cron class, com.ibm.tivoli.maximo.script.ScriptCrontask helps achieve this. You must register that class as a new crontask in the crontask application. You must then create an instance of it and set the “scriptname” property to the name of the script that you want this task to run. Set the schedule and  define the script. You can now run this newly defined script with the crontasks. It is no\ndifferent from any other crontask and you can activate or deactivate the task or change the\nschedule as you would do in any other cron task.\n\n\nYou must do this even if you already have an escalation, which is a crontask based on a Maximo object. This is because you may be required to schedule jobs that are not just based off Maximo objects. In those cases, these crontask based scripts would come in handy.\n\nThe following steps develop a cron script to log an error when the count of maxsessions exceeds a\nconfigured limit.\n\n1. Register the script crontask definition. For that you will use the Crontask app and the class name would be com.ibm.tivoli.maximo.script.ScriptCrontask. You will also create a cron task instance.\n   In that instance, you can set the frequency to 30 sec.\n   You can set the SCRPTNAME param value to SESSIONCOUNT. This will create\n   a script named SESSIONCOUNT to do the job.\n\n2. Create the script SESSIONCOUNT. The following sample script is in py. The\n   \"runasUserInfo\" implicit var will hold the userinfo for the cron job.\n\n\n```python\nfrom psdi.server import MXServer\ncnt = MXServer.getMXServer().getMboSet(\"maxsession\",runAsUserInfo).count();\nif cnt>1:\n  service.logError(\"cnt exceeds 1::\"+str(cnt))\n```\n\n3. Activate the crontask instance. You should wait a minute or so for the task to start.\n   You can use another browser instance to login to Maximo to create another maxsesson\n   record. That is when you can see that log that says \"cnt exceeds 1::\".\n\n4. You had hard coded the count limit. In this step you can softcode this by leveraging the\n   SCRIPTARG parameter in the Crontask by setting it to 1. Save and reload\n   the task.\n\n5. Modify the script to leverage that SCRIPTARG parameter using the implicit var called\n   \"arg\" .\n\n\n```python\nfrom psdi.server import MXServer\nargval = int(arg)\ncnt = MXServer.getMXServer().getMboSet(\"maxsession\",runAsUserInfo).count();\nif cnt>argval:\n  service.logError(\"cnt exceeds 1::\"+str(cnt))\n```\n\n6. Repeat step 3 to check if you get the error log.\n\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/otherlaunch/cronscript.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}