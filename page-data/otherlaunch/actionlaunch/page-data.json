{
    "componentChunkName": "component---src-pages-otherlaunch-actionlaunch-mdx",
    "path": "/otherlaunch/actionlaunch/",
    "result": {"pageContext":{"frontmatter":{"title":"Action Launchpoint"},"relativePagePath":"/otherlaunch/actionlaunch.mdx","titleType":"append","MdxNode":{"id":"478efea5-4bfe-5ebb-93be-ce8462939cca","children":[],"parent":"6eb55a89-527f-539f-89f5-a68b6e5b1297","internal":{"content":"---\ntitle: Action Launchpoint\n---\n\n## Action Launchpoint\nWe all know about the Maximo Actions framework. Maximo has a built in library of Actions which can be invoked from Workflows,\nEscalations, UI Menu's, UI Buttons and a slew of other components. More often than not those built in library of Actions are not enough and\nimplementers go out and develop their own custom Actions and of course the language you are forced to use is JAVA. Scripting addresses this concern where\nan Action can be scripted with a scripting language of your choice [OOTB – Jython and JavaScript]. Lets see how we can use a scripted Action to do some\ncalculated meters for Assets. The screenshot below shows how to launch the Action Launchpoint wizard.\n\n![Action Launchpoint UI](actui.jpg)\n\nAs before lets first study the requirement which is to be able to calculate an\nAsset meter value based on some other meters associated with that Asset. For\nexample lets say we want to calculate the value of the PRESSURE meter based\non the IN-PRESSUR and O-PRESSUR meter such that the last reading of the\nPRESSURE meter is the summation of the IN and O-PRESSUR meters\nreadings. And lets say we choose to do it in an offline fashion where as opposed\nto a real time fashion [for which we would have needed to use Object Launch\npoints to trap meter modification events]. The simplest way to do offline actions\nin a repeated fashion in Maximo is to use Escalations which are nothing but cron\njobs which execute a predefined Action in the context of a Mbo. Now instead of\nwriting the Action java code we will script it up. Shown below are the steps to do\nthis.\n\nFirst we define a relationship called assetmeterip [asset meter input pressure]\nusing the DB-Config application which relates an Asset to the Asset meter\nnamed IN-PRESSUR. The where clause is as below.\n```sql\nassetnum=:assetnum and siteid=:siteid and metername='IN-PRESSUR'\n```\nSimilarly we define the other 2 relationships \n\n|Realtion name|Relation Where|\n|:-----------|:-------------------------------|\n|assetmeterop|assetnum=:assetnum and siteid=:siteid and metername='O-PRESSUR'|\n|assetmeterp|assetnum=:assetnum and siteid=:siteid and metername='PRESSURE'|\n\n\nNext we use the Action Launch Point wizard to define the Action Launch Point.\n\n\n![Action Launchpoint UI page 1](actionlp1.jpg)\n\n\nThough this wizard would create the Action behind the scene – its the\nresponsibility of the implementer to attach that Action to the escalation, workflow\nor the UI button/menu. By default the launch point name is used as the name of\nthe Action, but you can modify the value to suit your naming convention although its not recommended just because of name confusion and conflicts later on. \nIn the first step of the wizard you would see that the object name is optional, which is in-line with\nthe Maximo Action framework where an Action may or maynot be associated with a Maximo object. In this case however we do want to specify the object as\nAsset as the Action is specific to the Asset Mbo. Since we are defining a new script we will choose the “New Script” option.\n\nThe next page is the bindings page where we are going to define the variables\nthat we intend to use for the script and their bindings. To do this job all we need\nis the last reading value of the IN-PRESSUR and O-PRESSUR meters and set\nthe calculated value to the new reading attribute of the PRESSURE meter. We\nhowever do not want to set the value if the calculated value is the same as the\nlast reading value of the PRESSURE meter as that would generate meter\nreading history even though the reading never got modified. To check this we\nwould need the last reading value of the PRESSURE meter. So our variable\nbindings will look like below:\n\n\n|Variable name|Variable type|Binding\n|:-----------|:------------|:-----------------------------|\n|iplr|IN|assetmeterip.lastreading|\n|olr|IN|assetmeterop.lastreading|\n|plr|IN|assetmeterp.lastreading|\n|pnr|OUT|assetmeterp.newreading|\n\n\nThe iplr [IN-PRESSUR meters last reading], olr [O-PRESSUR meters last\nreading] and plr [PRESSURE meters last reading] are all of type IN as we just\nneed those values to calculate the pnr [PRESSURE meters last reading]. Note\nthe pnr is of type OUT as we are going to set it back to the PRESSURE meter\nmbo.\nNext page is the script code and it will look as below.\n\n```python\ny=float(iplr)+float(olr)\nif y!=float(plr):\n  pnr=str(y)\n```\n\nThe `if` check in the 2nd line takes care of not updating the `pnr` value if the calculated value is the same as the `plr` [PRESSURE\nmeters last reading]. Note this calculation was implemented as a mere addition just as an example. In real implementations it can be any complicated\nmathematical calculation as needed for your business case and only limited by the mathematical support provided by the scripting language of your choice.\nNow we are not done yet as we need to associate this Action to an Escalation. Our next step is to create an escalation which will only apply to those Assets\nwhich have all those 3 meters. We use the escalation condition to implement that sifting functionality. The SQL condition for the above case will look like\nbelow.\n\n```sql\nexists (select assetnum from assetmeter where metername='IN-PRESSUR' and\nassetnum=asset.assetnum and siteid=asset.siteid) and exists (select assetnum from assetmeter\nwhere metername='O-PRESSUR' and assetnum=asset.assetnum and siteid=asset.siteid) and\nexists (select assetnum from assetmeter where metername='PRESSURE' and\nassetnum=asset.assetnum and siteid=asset.siteid)\n```  \n\nNext we select the Action for this escalation – the name of the Action is the same as the launch point name [unless you had modified it in the step 1 of the wizard].\nAfter we activate the escalation our job is done – the escalation executes the scripted Action for all those Assets with the 3 meters and the modified Asset\nmeter readings are saved and committed by the escalation framework.  \n\n\nAn important thing to note here is if you had chosen to not attach the Action to a Maximo object – the step 2 of the wizard [variables and bindings] will not let you\nbind a variable to a Mbo attribute. You can however use the literal, system property and maxvar variable binding types. A use case for that might arise when\nyou write a generic Action that say invokes a service [like a Web service] which is not specific to a Mbo or you intend to do the script code based on direct usage\nof the Mbo apis and hence will not need the mbo attribute bindings.\n\n","type":"Mdx","contentDigest":"e5d516edb23919635c9e8b93a2f33dc9","owner":"gatsby-plugin-mdx","counter":168},"frontmatter":{"title":"Action Launchpoint"},"exports":{},"rawBody":"---\ntitle: Action Launchpoint\n---\n\n## Action Launchpoint\nWe all know about the Maximo Actions framework. Maximo has a built in library of Actions which can be invoked from Workflows,\nEscalations, UI Menu's, UI Buttons and a slew of other components. More often than not those built in library of Actions are not enough and\nimplementers go out and develop their own custom Actions and of course the language you are forced to use is JAVA. Scripting addresses this concern where\nan Action can be scripted with a scripting language of your choice [OOTB – Jython and JavaScript]. Lets see how we can use a scripted Action to do some\ncalculated meters for Assets. The screenshot below shows how to launch the Action Launchpoint wizard.\n\n![Action Launchpoint UI](actui.jpg)\n\nAs before lets first study the requirement which is to be able to calculate an\nAsset meter value based on some other meters associated with that Asset. For\nexample lets say we want to calculate the value of the PRESSURE meter based\non the IN-PRESSUR and O-PRESSUR meter such that the last reading of the\nPRESSURE meter is the summation of the IN and O-PRESSUR meters\nreadings. And lets say we choose to do it in an offline fashion where as opposed\nto a real time fashion [for which we would have needed to use Object Launch\npoints to trap meter modification events]. The simplest way to do offline actions\nin a repeated fashion in Maximo is to use Escalations which are nothing but cron\njobs which execute a predefined Action in the context of a Mbo. Now instead of\nwriting the Action java code we will script it up. Shown below are the steps to do\nthis.\n\nFirst we define a relationship called assetmeterip [asset meter input pressure]\nusing the DB-Config application which relates an Asset to the Asset meter\nnamed IN-PRESSUR. The where clause is as below.\n```sql\nassetnum=:assetnum and siteid=:siteid and metername='IN-PRESSUR'\n```\nSimilarly we define the other 2 relationships \n\n|Realtion name|Relation Where|\n|:-----------|:-------------------------------|\n|assetmeterop|assetnum=:assetnum and siteid=:siteid and metername='O-PRESSUR'|\n|assetmeterp|assetnum=:assetnum and siteid=:siteid and metername='PRESSURE'|\n\n\nNext we use the Action Launch Point wizard to define the Action Launch Point.\n\n\n![Action Launchpoint UI page 1](actionlp1.jpg)\n\n\nThough this wizard would create the Action behind the scene – its the\nresponsibility of the implementer to attach that Action to the escalation, workflow\nor the UI button/menu. By default the launch point name is used as the name of\nthe Action, but you can modify the value to suit your naming convention although its not recommended just because of name confusion and conflicts later on. \nIn the first step of the wizard you would see that the object name is optional, which is in-line with\nthe Maximo Action framework where an Action may or maynot be associated with a Maximo object. In this case however we do want to specify the object as\nAsset as the Action is specific to the Asset Mbo. Since we are defining a new script we will choose the “New Script” option.\n\nThe next page is the bindings page where we are going to define the variables\nthat we intend to use for the script and their bindings. To do this job all we need\nis the last reading value of the IN-PRESSUR and O-PRESSUR meters and set\nthe calculated value to the new reading attribute of the PRESSURE meter. We\nhowever do not want to set the value if the calculated value is the same as the\nlast reading value of the PRESSURE meter as that would generate meter\nreading history even though the reading never got modified. To check this we\nwould need the last reading value of the PRESSURE meter. So our variable\nbindings will look like below:\n\n\n|Variable name|Variable type|Binding\n|:-----------|:------------|:-----------------------------|\n|iplr|IN|assetmeterip.lastreading|\n|olr|IN|assetmeterop.lastreading|\n|plr|IN|assetmeterp.lastreading|\n|pnr|OUT|assetmeterp.newreading|\n\n\nThe iplr [IN-PRESSUR meters last reading], olr [O-PRESSUR meters last\nreading] and plr [PRESSURE meters last reading] are all of type IN as we just\nneed those values to calculate the pnr [PRESSURE meters last reading]. Note\nthe pnr is of type OUT as we are going to set it back to the PRESSURE meter\nmbo.\nNext page is the script code and it will look as below.\n\n```python\ny=float(iplr)+float(olr)\nif y!=float(plr):\n  pnr=str(y)\n```\n\nThe `if` check in the 2nd line takes care of not updating the `pnr` value if the calculated value is the same as the `plr` [PRESSURE\nmeters last reading]. Note this calculation was implemented as a mere addition just as an example. In real implementations it can be any complicated\nmathematical calculation as needed for your business case and only limited by the mathematical support provided by the scripting language of your choice.\nNow we are not done yet as we need to associate this Action to an Escalation. Our next step is to create an escalation which will only apply to those Assets\nwhich have all those 3 meters. We use the escalation condition to implement that sifting functionality. The SQL condition for the above case will look like\nbelow.\n\n```sql\nexists (select assetnum from assetmeter where metername='IN-PRESSUR' and\nassetnum=asset.assetnum and siteid=asset.siteid) and exists (select assetnum from assetmeter\nwhere metername='O-PRESSUR' and assetnum=asset.assetnum and siteid=asset.siteid) and\nexists (select assetnum from assetmeter where metername='PRESSURE' and\nassetnum=asset.assetnum and siteid=asset.siteid)\n```  \n\nNext we select the Action for this escalation – the name of the Action is the same as the launch point name [unless you had modified it in the step 1 of the wizard].\nAfter we activate the escalation our job is done – the escalation executes the scripted Action for all those Assets with the 3 meters and the modified Asset\nmeter readings are saved and committed by the escalation framework.  \n\n\nAn important thing to note here is if you had chosen to not attach the Action to a Maximo object – the step 2 of the wizard [variables and bindings] will not let you\nbind a variable to a Mbo attribute. You can however use the literal, system property and maxvar variable binding types. A use case for that might arise when\nyou write a generic Action that say invokes a service [like a Web service] which is not specific to a Mbo or you intend to do the script code based on direct usage\nof the Mbo apis and hence will not need the mbo attribute bindings.\n\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/otherlaunch/actionlaunch.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}