{
    "componentChunkName": "component---src-pages-otherlaunch-actionlaunch-mdx",
    "path": "/otherlaunch/actionlaunch/",
    "result": {"pageContext":{"frontmatter":{"title":"Action launch point"},"relativePagePath":"/otherlaunch/actionlaunch.mdx","titleType":"append","MdxNode":{"id":"478efea5-4bfe-5ebb-93be-ce8462939cca","children":[],"parent":"6eb55a89-527f-539f-89f5-a68b6e5b1297","internal":{"content":"---\ntitle: Action launch point\n---\n\n## Action launch point\nThe Maximo Actions framework in Maximo has a built in library of Actions which can be invoked from Workflows,\nEscalations, UI Menus, UI Buttons and many other components. More often than not those built in library of Actions are not enough and\nimplementers have to develop their own custom Actions in JAVA only. Scripting addresses this concern where\nan Action can be scripted with a scripting language of your choice using Jython and JavaScript. You can use a scripted Action to do some\ncalculated meters for Assets. The following screenshot shows how to launch the **Action Launch Point** wizard.\n\n![Action Launchpoint UI](actui.jpg)\n\nThe requirement is to be able to calculate an\nAsset meter value based on some other meters associated with that Asset. For\nexample, you want to calculate the value of the PRESSURE meter, based\non the IN-PRESSUR and O-PRESSUR meter such that the last reading of the\nPRESSURE meter is the summation of the IN and O-PRESSUR meters\nreadings. Assume that you choose to do it offline as opposed to in real time, for which you would have to use Object Launch\npoints to trap meter modification events. The simplest way to do offline actions repeatedly in Maximo is to use Escalations, which are nothing but cron\njobs that execute a predefined Action in the context of an MBO. Instead of\nwriting the Action java code you will use a script as shown in the following steps:\n\n1. Define a relationship called assetmeterip [asset meter input pressure]\nusing the DB-Config application, which relates an Asset to the Asset meter\nnamed IN-PRESSUR. Use the following where clause:\n\n```sql\nassetnum=:assetnum and siteid=:siteid and metername='IN-PRESSUR'\n```\nSimilarly, define the other two relationships: \n\n|Realtion name|Relation where|\n|:-----------|:-------------------------------|\n|assetmeterop|assetnum=:assetnum and siteid=:siteid and metername='O-PRESSUR'|\n|assetmeterp|assetnum=:assetnum and siteid=:siteid and metername='PRESSURE'|\n\n\n2. Use the **Action Launch Point** wizard to define the Action Launch Point.\n\n\n![Action Launchpoint UI page 1](actionlp1.jpg)\n\n\nThough this wizard will create the Action behind the scene, it is the\nresponsibility of the implementer to attach that Action to the escalation, workflow\nor the UI button/menu. By default, the launch point name is used as the name of\nthe Action, but you can modify the value to suit your naming convention. However, it is better to avoid renaming it because of name confusion and conflicts later on. \nIn the first step of the wizard you saw that the object name is optional, which is in-line with\nthe Maximo Action framework where an Action may or may not be associated with a Maximo object. In this case however, you want to specify the object as\nAsset as the Action is specific to the Asset MBO. Since you are defining a new script you must choose the **New Script** option.\n\nThe next page is the bindings page where you have to define the variables\nthat you will use for the script and the variable bindings. You require the last reading value of the IN-PRESSUR and O-PRESSUR meters and  must set the calculated value to the new reading attribute of the PRESSURE meter. However, you do not want to set the value if the calculated value is the same as the last reading value of the PRESSURE meter because that would generate meter\nreading history even though the reading never got modified. To check this, you\nwould need the last reading value of the PRESSURE meter. So the following variable\nbindings will look like:\n\n\n|Variable name|Variable type|Binding\n|:-----------|:------------|:-----------------------------|\n|iplr|IN|assetmeterip.lastreading|\n|olr|IN|assetmeterop.lastreading|\n|plr|IN|assetmeterp.lastreading|\n|pnr|OUT|assetmeterp.newreading|\n\n\nThe iplr [IN-PRESSUR meters last reading], olr [O-PRESSUR meters last\nreading] and plr [PRESSURE meters last reading] are all of type IN as you \nRequire those values to calculate the pnr [PRESSURE meters last reading].\nThe pnr is of type OUT as you are going to set it back to the PRESSURE meter\nMBO.\n\n3. Use the following script code:\n\n```python\ny=float(iplr)+float(olr)\nif y!=float(plr):\n  pnr=str(y)\n```\n\nThe `if` check in the second line takes care of not updating the `pnr` value if the calculated value is the same as the `plr` [PRESSURE\nmeters last reading]. This calculation was implemented as an example. In real implementations it can be any complicated\nmathematical calculation as per your business requirement, only limited by the mathematical support provided by the scripting language of your choice.\n\n4. You must now associate this Action to an Escalation. Create an escalation that will only apply to those Assets\nwhich have all those three meters. Use the escalation condition to implement that sifting functionality. The following SQL condition is what you should use:\n\n```sql\nexists (select assetnum from assetmeter where metername='IN-PRESSUR' and\nassetnum=asset.assetnum and siteid=asset.siteid) and exists (select assetnum from assetmeter\nwhere metername='O-PRESSUR' and assetnum=asset.assetnum and siteid=asset.siteid) and\nexists (select assetnum from assetmeter where metername='PRESSURE' and\nassetnum=asset.assetnum and siteid=asset.siteid)\n```  \n\n5. Select the Action for this escalation. The name of the Action is the same as the launch point name unless you had modified it in the step 1 of the wizard.\nAfter you activate the escalation, the job is complete. The escalation executes the scripted Action for all those Assets with the three meters and the modified Asset\nmeter readings are saved and committed by the escalation framework.  \n\n\nIf you had chosen to not attach the Action to a Maximo object, step 2 of the wizard where you specified the variables and bindings, will not let you\nbind a variable to an MBO attribute. You can however use the literal, system property and maxvar variable binding types. A use case for that might arise when\nyou write a generic Action that for example, invokes a service, like a Web service, which is not specific to an MBO or you intend to do the script code based on direct usage\nof the MBO APIs and therefore, will not need the MBO attribute bindings.\n\n","type":"Mdx","contentDigest":"77ed720b4bc6a1213071a827bae751e2","owner":"gatsby-plugin-mdx","counter":188},"frontmatter":{"title":"Action launch point"},"exports":{},"rawBody":"---\ntitle: Action launch point\n---\n\n## Action launch point\nThe Maximo Actions framework in Maximo has a built in library of Actions which can be invoked from Workflows,\nEscalations, UI Menus, UI Buttons and many other components. More often than not those built in library of Actions are not enough and\nimplementers have to develop their own custom Actions in JAVA only. Scripting addresses this concern where\nan Action can be scripted with a scripting language of your choice using Jython and JavaScript. You can use a scripted Action to do some\ncalculated meters for Assets. The following screenshot shows how to launch the **Action Launch Point** wizard.\n\n![Action Launchpoint UI](actui.jpg)\n\nThe requirement is to be able to calculate an\nAsset meter value based on some other meters associated with that Asset. For\nexample, you want to calculate the value of the PRESSURE meter, based\non the IN-PRESSUR and O-PRESSUR meter such that the last reading of the\nPRESSURE meter is the summation of the IN and O-PRESSUR meters\nreadings. Assume that you choose to do it offline as opposed to in real time, for which you would have to use Object Launch\npoints to trap meter modification events. The simplest way to do offline actions repeatedly in Maximo is to use Escalations, which are nothing but cron\njobs that execute a predefined Action in the context of an MBO. Instead of\nwriting the Action java code you will use a script as shown in the following steps:\n\n1. Define a relationship called assetmeterip [asset meter input pressure]\nusing the DB-Config application, which relates an Asset to the Asset meter\nnamed IN-PRESSUR. Use the following where clause:\n\n```sql\nassetnum=:assetnum and siteid=:siteid and metername='IN-PRESSUR'\n```\nSimilarly, define the other two relationships: \n\n|Realtion name|Relation where|\n|:-----------|:-------------------------------|\n|assetmeterop|assetnum=:assetnum and siteid=:siteid and metername='O-PRESSUR'|\n|assetmeterp|assetnum=:assetnum and siteid=:siteid and metername='PRESSURE'|\n\n\n2. Use the **Action Launch Point** wizard to define the Action Launch Point.\n\n\n![Action Launchpoint UI page 1](actionlp1.jpg)\n\n\nThough this wizard will create the Action behind the scene, it is the\nresponsibility of the implementer to attach that Action to the escalation, workflow\nor the UI button/menu. By default, the launch point name is used as the name of\nthe Action, but you can modify the value to suit your naming convention. However, it is better to avoid renaming it because of name confusion and conflicts later on. \nIn the first step of the wizard you saw that the object name is optional, which is in-line with\nthe Maximo Action framework where an Action may or may not be associated with a Maximo object. In this case however, you want to specify the object as\nAsset as the Action is specific to the Asset MBO. Since you are defining a new script you must choose the **New Script** option.\n\nThe next page is the bindings page where you have to define the variables\nthat you will use for the script and the variable bindings. You require the last reading value of the IN-PRESSUR and O-PRESSUR meters and  must set the calculated value to the new reading attribute of the PRESSURE meter. However, you do not want to set the value if the calculated value is the same as the last reading value of the PRESSURE meter because that would generate meter\nreading history even though the reading never got modified. To check this, you\nwould need the last reading value of the PRESSURE meter. So the following variable\nbindings will look like:\n\n\n|Variable name|Variable type|Binding\n|:-----------|:------------|:-----------------------------|\n|iplr|IN|assetmeterip.lastreading|\n|olr|IN|assetmeterop.lastreading|\n|plr|IN|assetmeterp.lastreading|\n|pnr|OUT|assetmeterp.newreading|\n\n\nThe iplr [IN-PRESSUR meters last reading], olr [O-PRESSUR meters last\nreading] and plr [PRESSURE meters last reading] are all of type IN as you \nRequire those values to calculate the pnr [PRESSURE meters last reading].\nThe pnr is of type OUT as you are going to set it back to the PRESSURE meter\nMBO.\n\n3. Use the following script code:\n\n```python\ny=float(iplr)+float(olr)\nif y!=float(plr):\n  pnr=str(y)\n```\n\nThe `if` check in the second line takes care of not updating the `pnr` value if the calculated value is the same as the `plr` [PRESSURE\nmeters last reading]. This calculation was implemented as an example. In real implementations it can be any complicated\nmathematical calculation as per your business requirement, only limited by the mathematical support provided by the scripting language of your choice.\n\n4. You must now associate this Action to an Escalation. Create an escalation that will only apply to those Assets\nwhich have all those three meters. Use the escalation condition to implement that sifting functionality. The following SQL condition is what you should use:\n\n```sql\nexists (select assetnum from assetmeter where metername='IN-PRESSUR' and\nassetnum=asset.assetnum and siteid=asset.siteid) and exists (select assetnum from assetmeter\nwhere metername='O-PRESSUR' and assetnum=asset.assetnum and siteid=asset.siteid) and\nexists (select assetnum from assetmeter where metername='PRESSURE' and\nassetnum=asset.assetnum and siteid=asset.siteid)\n```  \n\n5. Select the Action for this escalation. The name of the Action is the same as the launch point name unless you had modified it in the step 1 of the wizard.\nAfter you activate the escalation, the job is complete. The escalation executes the scripted Action for all those Assets with the three meters and the modified Asset\nmeter readings are saved and committed by the escalation framework.  \n\n\nIf you had chosen to not attach the Action to a Maximo object, step 2 of the wizard where you specified the variables and bindings, will not let you\nbind a variable to an MBO attribute. You can however use the literal, system property and maxvar variable binding types. A use case for that might arise when\nyou write a generic Action that for example, invokes a service, like a Web service, which is not specific to an MBO or you intend to do the script code based on direct usage\nof the MBO APIs and therefore, will not need the MBO attribute bindings.\n\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/otherlaunch/actionlaunch.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}