{
    "componentChunkName": "component---src-pages-index-mdx",
    "path": "/",
    "result": {"pageContext":{"frontmatter":{"title":"Maximo scripting"},"relativePagePath":"/index.mdx","titleType":"append","MdxNode":{"id":"0e947d62-fd36-5678-8cd8-d553fe63eef6","children":[],"parent":"f146fd1c-c7d5-52ec-ad67-cba78b5a9c12","internal":{"content":"---\ntitle: Maximo scripting\n---\n\nimport HomepageTemplate from 'gatsby-theme-carbon/src/templates/Homepage';\nexport default HomepageTemplate;\n\n## All about Maximo scripting\n\nScripting was introduced in Maximo 7.5 based on the feedback from the user community who wanted to have a simpler yet\neffective way of customizing the product without having to go through system downtime and a steep learning curve.\n\nWhile Maximo provides multiple customization points, most of them need JAVA coding skills to do any meaningful or logic -based customization. It \nwould also require a deep knowledge of Maximo APIs as well as the Maximo internal architecture. That can often be a difficult task even for an experienced programmer.\n\nMaximo scripting helps ease some of these concerns. Maximo scripting is primarily based on the Java Specification Request  (JSR) 223 specification, which is a part of JAVA 6.\nThis JSR allows a JAVA application, which is Maximo, to host script engines  compliant with this specification. The engines that are supported in Maximo by default are:\n\n\n|Script Languages|\n|:-------------------------------|\n|Nashorn (JavaScript) which ships with IBM/Oracle JDK|\n|Jython (2.7.2) which is included as part of Maximo|\n\nYou can use either of these scripting languages to customize Maximo using the Maximo scripting framework. There are other popular JSR 223 compliant scripting engines like JRuby/Groovy and it should be fairly simple to add support for these by adding these engines [jars] to the Maximo application classpath. The scripting framework is able to detect those jars from the classpath\nand show them as available languages in the scripting application. However, currently Maximo has only been tested with the\nNashorn-JavaScript and Jython engines and you may face issues implementing some of those JSR223 compliant engines.\n\n\nIn addition to the JSR 223 compliant engines, the scripting framework is extensible to support other custom engines as shown in the following architecture diagram:\n\n\n![Script Driver architecture](scriptdriverarch.jpg)\n\nThere is support for Maximo Business Rules (MBR) script driver, which can invoke MBR scripts. This is a non-JSR driver written to handle a custom scripting language (MBR) \ncreated just for Maximo. This shows the extensibility of the framework.\n\n\n\n","type":"Mdx","contentDigest":"e3a3ec06d052d62191fe72a4e1c2870c","owner":"gatsby-plugin-mdx","counter":146},"frontmatter":{"title":"Maximo scripting"},"exports":{},"rawBody":"---\ntitle: Maximo scripting\n---\n\nimport HomepageTemplate from 'gatsby-theme-carbon/src/templates/Homepage';\nexport default HomepageTemplate;\n\n## All about Maximo scripting\n\nScripting was introduced in Maximo 7.5 based on the feedback from the user community who wanted to have a simpler yet\neffective way of customizing the product without having to go through system downtime and a steep learning curve.\n\nWhile Maximo provides multiple customization points, most of them need JAVA coding skills to do any meaningful or logic -based customization. It \nwould also require a deep knowledge of Maximo APIs as well as the Maximo internal architecture. That can often be a difficult task even for an experienced programmer.\n\nMaximo scripting helps ease some of these concerns. Maximo scripting is primarily based on the Java Specification Request  (JSR) 223 specification, which is a part of JAVA 6.\nThis JSR allows a JAVA application, which is Maximo, to host script engines  compliant with this specification. The engines that are supported in Maximo by default are:\n\n\n|Script Languages|\n|:-------------------------------|\n|Nashorn (JavaScript) which ships with IBM/Oracle JDK|\n|Jython (2.7.2) which is included as part of Maximo|\n\nYou can use either of these scripting languages to customize Maximo using the Maximo scripting framework. There are other popular JSR 223 compliant scripting engines like JRuby/Groovy and it should be fairly simple to add support for these by adding these engines [jars] to the Maximo application classpath. The scripting framework is able to detect those jars from the classpath\nand show them as available languages in the scripting application. However, currently Maximo has only been tested with the\nNashorn-JavaScript and Jython engines and you may face issues implementing some of those JSR223 compliant engines.\n\n\nIn addition to the JSR 223 compliant engines, the scripting framework is extensible to support other custom engines as shown in the following architecture diagram:\n\n\n![Script Driver architecture](scriptdriverarch.jpg)\n\nThere is support for Maximo Business Rules (MBR) script driver, which can invoke MBR scripts. This is a non-JSR driver written to handle a custom scripting language (MBR) \ncreated just for Maximo. This shows the extensibility of the framework.\n\n\n\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/index.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}