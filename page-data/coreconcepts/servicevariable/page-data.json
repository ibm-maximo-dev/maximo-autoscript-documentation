{
    "componentChunkName": "component---src-pages-coreconcepts-servicevariable-mdx",
    "path": "/coreconcepts/servicevariable/",
    "result": {"pageContext":{"frontmatter":{"title":"service Variable"},"relativePagePath":"/coreconcepts/servicevariable.mdx","titleType":"append","MdxNode":{"id":"6e9d33e0-b979-533b-9e74-77db240e5a8a","children":[],"parent":"ffc57fd2-4790-5f7a-b0fc-c24e76ff9a46","internal":{"content":"---\ntitle: service Variable\n---\n\nInformation on most of the implicit variables can be found: [Core Components](/introduction/components) & [Manage Documentation](https://www.ibm.com/docs/en/maximo-manage/8.2.0?topic=scripts-implicit-variables). \nOne of the most common ones you'll utilize is service. This page will go slightly deeper in explaining what the service variable can do.\n\n## \"Service\" Variable\nThe `service` object is an implicit object available in all the scripts. For\nmost of the script points it's called `service`. As you go through this doc, you will see that the\nMIF Object Structure scripts are not directly referring to this variable as `service`. Instead they\nrefer to it as `ctx` (which is an extended version of the “service” object) in callback method input parameter.  \n\n\nThe `service` object helps us make some of the common tasks simple from an automation\nscript. For example the tasks like throwing an error or adding a warning or invoking workflows,\nMIF invoke channels, logging, HTTP calls etc become much easier leveraging the `service` var. And it's not just\neasy to use, it's also the better way to use. For example if you want to throw real\ntime errors, rather than setting the errorkey and errorgrp variables, you should just use the\nservice.error(grp,key) or service.error(grp,key,params) apis to achieve that. It's also leveraged to\ninvoke library scripts as you will see in the next few sections. We will also have examples on\nhow to invoke a MIF Invoke Channel to integrate to some rest apis using the\nservice.invokeChannel(channelname) api. \nBelow is a list of built-in functions that `service` object supports.\n\nThe first few are for json handling:\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|jsonToString|com.ibm.json.java.JSONObject|String|Used for converting a json object to string.|\n|jsonarrayToString|com.ibm.json.java.JSONArray|String|Used for converting a json array to string.|\n|tojsonarray|String|com.ibm.json.java.JSONArray|Converts a string to a JSON array.|\n|tojsonobject|String|com.ibm.json.java.JSONObject|Converts a string to a JSON object.|  \n\n\nThe next ones are classic UI interactions:\n\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|closeDialog|NA|void|Closes a classic UI dialog when the script is executed in context of an action launch point. A sample invocation would be `service.closeDialog()`|\n|openURL|String (url to open), boolean (whether to open in a new window)|void|opens a url specified in the input string parameter. A sample invocation would be `service.openURL(\"weather.com\", False)`|\n\n\nThe next ones are for HTTP calls and MIF endpoint invocations:  \n\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|httpget|String|String|invokes HTTP GET on the specified url (input string parameter) and returns the response as a String. Do not use this if the GET response type would be anything but a string or null. A sample usage would be `respData = service.httpget(\"some url\")`|\n|httppost|String (url), String (POST data)|String|invokes HTTP POST on the specified url (input string parameter) with POST data as a string and returns the response as a String. Do not use this if the POST response type would be anything but a string or null|\n|httpget|String (url),String (user),String (password)|String|invokes HTTP GET on the specified url (input string parameter) for BASIC auth user and password. Returns the response as a String. Do not use this if the GET response type would be anything but a string or null|\n|httppost|String (url),String (user),String (password), String (POST data)|String|invokes HTTP POST on the specified url (input string parameter) for BASIC auth user and password with POST data as a string and returns the response as a String. Do not use this if the POST response type would be anything but a string or null|\n|httppostasjson|String (url),String (user),String (password), com.ibm.json.java.JSONArtifact (POST Data)|com.ibm.json.java.JSONArtifact|invokes HTTP POST on the specified url (input string parameter) for BASIC auth user and password with POST data as a byte[]. Returns the response as a json. Do not use this if the response type would be anything but a json or null|\n|httppostasbytes|String (url),String (user),String (password), byte[] (POST data)|byte[]|invokes HTTP POST on the specified url (input string parameter) for BASIC auth user and password with POST data as a byte[] and returns the response as a byte[] or null|\n|httpgetasjson|String (url),String (user),String (headers), String (password)|com.ibm.json.java.JSONArtifact|invokes HTTP GET on the specified url (input string parameter) for BASIC auth user and password. The format for `headers` being `header1:val1,header2:val2`. Returns the response as a json. Do not use this if the response type would be anything but a json or null|\n|httpgetasbytes|String (url),String (user),String (password)|byte[]|invokes HTTP GET on the specified url (input string parameter) for BASIC auth user and password. Returns the response as a String. Do not use this if the GET response type would be anything but a string or null|\n|invokeEndpoint|String (endpoint),Map<String,String> (metadata),String (data)|String|invokes any MIF endpoint with the given name and metadata and String data. The response is a String|\n|invokeEndpoint|String (endpoint),Map<String,String> (metadata),byte[] (data)|byte[]|invokes any MIF endpoint with the given name and metadata and byte[] data. The response is a byte[]|\n|invokeChannel|String (channel name)|void|invokes a MIF Invokechannel with the given name. This leverages the `mbo` in context of the script and that `mbo` is used as the channel mbo.|\n|raiseSkipTransaction|NA|void|Throws the MXException with group \"iface\" and key \"SKIP_TRANSACTION\". Leveraged by MIF framework to skip processing certain inbound and outbound messages. |\n\n\nThe next few are for logging.These ones should be used for real time logging leveraging the logger for this script:\n\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|log|String (log message)|void|logs the message at DEBUG or INFO based on the setting on that script. A sample usage would look like `service.log(\"setting the replacementcost..\")`|\n|log_debug|String (logMsg)|void|script logger logging at DEBUG|\n|log_debug|String (logMsg), Throwable (error)|void|script logger logging at DEBUG|\n|log_info|String (logMsg)|void|script logger logging at INFO|\n|log_info|String (logMsg), Throwable (error)|void|script logger logging at INFO|\n|log_warn|String (logMsg)|void|script logger logging at WARN|\n|log_warn|String (logMsg), Throwable (error)|void|script logger logging at WARN|\n|log_error|String (logMsg)|void|script logger logging at ERROR|\n|log_error|String (logMsg), Throwable (error)|void|script logger logging at ERROR|\n|log_fatal|String (logMsg)|void|script logger logging at FATAL|\n|log_fatal|String (logMsg), Throwable (error)|void|script logger logging at FATAL|\n\n\nReal time Errors and warnings:\n\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|error|String (group), String (key)|void|Throws MXException with the error group and key (input parameters).|\n|error|String (group), String (key), String[] (params)|void|Throws MXException with the error group and key and params(input parameters)|\n|setWarning|String (group), String (key), String[] (params)|void|sets warning to the mboset in context `mbo.getThisMboSet()`. This is leveraged by REST apis and classic UI framework to show warnings. |\n\n\nNext few are for YNC interactions. We will discuss YNC with scripting in details later. \nThis is just to introduce the utility functions available in `service` for enabling YNC cutomizations using scripting.\n\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|yncerror|String (group), String (key)|void|Throws MXApplicationYesNoCancelException with the error group and key (input parameters).|\n|yncerror|String (group), String (key), String[] (params)|void|Throws MXApplicationYesNoCancelException with the error group and key and params(input parameters)|\n|yncuserinput|String (group), String (key), String[] (params)|int|provides the script code the input option (yes/no/cencel etc) chosen by the end user. This would be leveraged by the script code to provide business logic for the specific input.|\n\n\nThe next few are for library scripts which we will discuss in details later:\n\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|invokeScript|String (script name), Map<String,String> context|void|Invokes a script with the given name and passes in the context specified in input.|\n|invokeScript|String (script name)|Map<String,Object>|Invokes a script with the given name. Returns the context of the invoked script as a java Map object|\n|invokeScript|String (script name), String (function name), Object[] (function arguments)|Object|Invokes a function inside the target script with the specified arguments. The call returns the response of the function call (if any) as an object|\n","type":"Mdx","contentDigest":"5d95a0d8ff7f49965f91736b062b6019","owner":"gatsby-plugin-mdx","counter":151},"frontmatter":{"title":"service Variable"},"exports":{},"rawBody":"---\ntitle: service Variable\n---\n\nInformation on most of the implicit variables can be found: [Core Components](/introduction/components) & [Manage Documentation](https://www.ibm.com/docs/en/maximo-manage/8.2.0?topic=scripts-implicit-variables). \nOne of the most common ones you'll utilize is service. This page will go slightly deeper in explaining what the service variable can do.\n\n## \"Service\" Variable\nThe `service` object is an implicit object available in all the scripts. For\nmost of the script points it's called `service`. As you go through this doc, you will see that the\nMIF Object Structure scripts are not directly referring to this variable as `service`. Instead they\nrefer to it as `ctx` (which is an extended version of the “service” object) in callback method input parameter.  \n\n\nThe `service` object helps us make some of the common tasks simple from an automation\nscript. For example the tasks like throwing an error or adding a warning or invoking workflows,\nMIF invoke channels, logging, HTTP calls etc become much easier leveraging the `service` var. And it's not just\neasy to use, it's also the better way to use. For example if you want to throw real\ntime errors, rather than setting the errorkey and errorgrp variables, you should just use the\nservice.error(grp,key) or service.error(grp,key,params) apis to achieve that. It's also leveraged to\ninvoke library scripts as you will see in the next few sections. We will also have examples on\nhow to invoke a MIF Invoke Channel to integrate to some rest apis using the\nservice.invokeChannel(channelname) api. \nBelow is a list of built-in functions that `service` object supports.\n\nThe first few are for json handling:\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|jsonToString|com.ibm.json.java.JSONObject|String|Used for converting a json object to string.|\n|jsonarrayToString|com.ibm.json.java.JSONArray|String|Used for converting a json array to string.|\n|tojsonarray|String|com.ibm.json.java.JSONArray|Converts a string to a JSON array.|\n|tojsonobject|String|com.ibm.json.java.JSONObject|Converts a string to a JSON object.|  \n\n\nThe next ones are classic UI interactions:\n\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|closeDialog|NA|void|Closes a classic UI dialog when the script is executed in context of an action launch point. A sample invocation would be `service.closeDialog()`|\n|openURL|String (url to open), boolean (whether to open in a new window)|void|opens a url specified in the input string parameter. A sample invocation would be `service.openURL(\"weather.com\", False)`|\n\n\nThe next ones are for HTTP calls and MIF endpoint invocations:  \n\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|httpget|String|String|invokes HTTP GET on the specified url (input string parameter) and returns the response as a String. Do not use this if the GET response type would be anything but a string or null. A sample usage would be `respData = service.httpget(\"some url\")`|\n|httppost|String (url), String (POST data)|String|invokes HTTP POST on the specified url (input string parameter) with POST data as a string and returns the response as a String. Do not use this if the POST response type would be anything but a string or null|\n|httpget|String (url),String (user),String (password)|String|invokes HTTP GET on the specified url (input string parameter) for BASIC auth user and password. Returns the response as a String. Do not use this if the GET response type would be anything but a string or null|\n|httppost|String (url),String (user),String (password), String (POST data)|String|invokes HTTP POST on the specified url (input string parameter) for BASIC auth user and password with POST data as a string and returns the response as a String. Do not use this if the POST response type would be anything but a string or null|\n|httppostasjson|String (url),String (user),String (password), com.ibm.json.java.JSONArtifact (POST Data)|com.ibm.json.java.JSONArtifact|invokes HTTP POST on the specified url (input string parameter) for BASIC auth user and password with POST data as a byte[]. Returns the response as a json. Do not use this if the response type would be anything but a json or null|\n|httppostasbytes|String (url),String (user),String (password), byte[] (POST data)|byte[]|invokes HTTP POST on the specified url (input string parameter) for BASIC auth user and password with POST data as a byte[] and returns the response as a byte[] or null|\n|httpgetasjson|String (url),String (user),String (headers), String (password)|com.ibm.json.java.JSONArtifact|invokes HTTP GET on the specified url (input string parameter) for BASIC auth user and password. The format for `headers` being `header1:val1,header2:val2`. Returns the response as a json. Do not use this if the response type would be anything but a json or null|\n|httpgetasbytes|String (url),String (user),String (password)|byte[]|invokes HTTP GET on the specified url (input string parameter) for BASIC auth user and password. Returns the response as a String. Do not use this if the GET response type would be anything but a string or null|\n|invokeEndpoint|String (endpoint),Map<String,String> (metadata),String (data)|String|invokes any MIF endpoint with the given name and metadata and String data. The response is a String|\n|invokeEndpoint|String (endpoint),Map<String,String> (metadata),byte[] (data)|byte[]|invokes any MIF endpoint with the given name and metadata and byte[] data. The response is a byte[]|\n|invokeChannel|String (channel name)|void|invokes a MIF Invokechannel with the given name. This leverages the `mbo` in context of the script and that `mbo` is used as the channel mbo.|\n|raiseSkipTransaction|NA|void|Throws the MXException with group \"iface\" and key \"SKIP_TRANSACTION\". Leveraged by MIF framework to skip processing certain inbound and outbound messages. |\n\n\nThe next few are for logging.These ones should be used for real time logging leveraging the logger for this script:\n\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|log|String (log message)|void|logs the message at DEBUG or INFO based on the setting on that script. A sample usage would look like `service.log(\"setting the replacementcost..\")`|\n|log_debug|String (logMsg)|void|script logger logging at DEBUG|\n|log_debug|String (logMsg), Throwable (error)|void|script logger logging at DEBUG|\n|log_info|String (logMsg)|void|script logger logging at INFO|\n|log_info|String (logMsg), Throwable (error)|void|script logger logging at INFO|\n|log_warn|String (logMsg)|void|script logger logging at WARN|\n|log_warn|String (logMsg), Throwable (error)|void|script logger logging at WARN|\n|log_error|String (logMsg)|void|script logger logging at ERROR|\n|log_error|String (logMsg), Throwable (error)|void|script logger logging at ERROR|\n|log_fatal|String (logMsg)|void|script logger logging at FATAL|\n|log_fatal|String (logMsg), Throwable (error)|void|script logger logging at FATAL|\n\n\nReal time Errors and warnings:\n\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|error|String (group), String (key)|void|Throws MXException with the error group and key (input parameters).|\n|error|String (group), String (key), String[] (params)|void|Throws MXException with the error group and key and params(input parameters)|\n|setWarning|String (group), String (key), String[] (params)|void|sets warning to the mboset in context `mbo.getThisMboSet()`. This is leveraged by REST apis and classic UI framework to show warnings. |\n\n\nNext few are for YNC interactions. We will discuss YNC with scripting in details later. \nThis is just to introduce the utility functions available in `service` for enabling YNC cutomizations using scripting.\n\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|yncerror|String (group), String (key)|void|Throws MXApplicationYesNoCancelException with the error group and key (input parameters).|\n|yncerror|String (group), String (key), String[] (params)|void|Throws MXApplicationYesNoCancelException with the error group and key and params(input parameters)|\n|yncuserinput|String (group), String (key), String[] (params)|int|provides the script code the input option (yes/no/cencel etc) chosen by the end user. This would be leveraged by the script code to provide business logic for the specific input.|\n\n\nThe next few are for library scripts which we will discuss in details later:\n\n\n|Function|Request|Response|Description|\n|:-----------|:----------------------|:------------------------|:----------------------------------------------|\n|invokeScript|String (script name), Map<String,String> context|void|Invokes a script with the given name and passes in the context specified in input.|\n|invokeScript|String (script name)|Map<String,Object>|Invokes a script with the given name. Returns the context of the invoked script as a java Map object|\n|invokeScript|String (script name), String (function name), Object[] (function arguments)|Object|Invokes a function inside the target script with the specified arguments. The call returns the response of the function call (if any) as an object|\n","fileAbsolutePath":"/home/sls/git/maximo-app-framework/maximo-autoscript-documentation/src/pages/coreconcepts/servicevariable.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}