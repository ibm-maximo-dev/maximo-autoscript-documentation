{
    "componentChunkName": "component---src-pages-coreconcepts-libraryscripts-mdx",
    "path": "/coreconcepts/libraryscripts/",
    "result": {"pageContext":{"frontmatter":{"title":"Library script"},"relativePagePath":"/coreconcepts/libraryscripts.mdx","titleType":"append","MdxNode":{"id":"cafbc265-8d58-5374-84c6-00239d1f6341","children":[],"parent":"121c5fd3-38cb-5d06-a482-4f1bd8f01b11","internal":{"content":"---\ntitle: Library script\n---\n\n## Library script\n\nLibrary scripts are good for encapsulating some re-usable logic. From Maximo 7.6 onwards, you can write those reusable blocks as \nlibrary scripts, which are just simple scripts with no launch points. You can then leverage the `service` variable to invoke those library scripts from another script. \nLibrary scripts have undergone some improvements over the last few releases. \nThe following simple example showcases the change in usage:\n\n```python\nr=a*b\n```\n\nThis is a script that multiplies two variables - `a` and `b` and sets the result to another variable `r`.\nAssume that you are invoking this script from another script and you want to pass in `a` and `b` and then get the `r` value back.\nThe following script shows a sample that calls this library script (named CALC):\n\n```python\nfrom java.util import HashMap\n\nmap = HashMap()\nmap.put(\"a\",2)\nmap.put(\"b\",3)\nservice.invokeScript(\"CALC\",map)\nres = map.get(\"r\")\n```\n\nThe calling script leverages the implicit `service` variable (available to all scripts) to invoke the library script named CALC. \nIt also passes in the `a` and `b` as a Map object to the script. The response `r` is recovered from that same Map object. \nWhile this way works, it has a few downsides.\n1. It does not allow the library script to have multiple functions, becoming a true utility script. In this model you will be forced to create many such library scripts - each for one utility.\n2. The calling script spends a lot of code to setup the library script call dealing with java imports and java data structures.\n\nThe following example shows a simpler way to rewrite the CALC script, while helping the library scripts to be function based:\n\n\n\n```python\ndef mult(a,b):\n  return a*b\n  \n def add(a,b):\n  return a+b\n```\n\nNow it is possible to accommodate multiple utility modules in one library script. The following calling script can be used:\n\n```python\nres = service.invokeScript(\"CALC\",\"mult\",[2,3])\n```\n\nThis reduces the number of code lines significantly and removes the java Map imports, instead leveraging the native language (py) to do it all.\nIt also helps make the code more readable. These are just samples meant to demonstrate the library script concept and how `service` is leveraged to invoke those.\nThe real life examples would certainly include reusable business logic inside the library scripts.\n\n\nFor the script, there was no need to import or make any new py/js modules - it is all natively handled by Maximo. \nThe library scripts are no different that any other scripts in terms of storage, caching, compilation, and other aspects.\n","type":"Mdx","contentDigest":"9466ac6412d87c0d173c9f6b6c65c631","owner":"gatsby-plugin-mdx","counter":168},"frontmatter":{"title":"Library script"},"exports":{},"rawBody":"---\ntitle: Library script\n---\n\n## Library script\n\nLibrary scripts are good for encapsulating some re-usable logic. From Maximo 7.6 onwards, you can write those reusable blocks as \nlibrary scripts, which are just simple scripts with no launch points. You can then leverage the `service` variable to invoke those library scripts from another script. \nLibrary scripts have undergone some improvements over the last few releases. \nThe following simple example showcases the change in usage:\n\n```python\nr=a*b\n```\n\nThis is a script that multiplies two variables - `a` and `b` and sets the result to another variable `r`.\nAssume that you are invoking this script from another script and you want to pass in `a` and `b` and then get the `r` value back.\nThe following script shows a sample that calls this library script (named CALC):\n\n```python\nfrom java.util import HashMap\n\nmap = HashMap()\nmap.put(\"a\",2)\nmap.put(\"b\",3)\nservice.invokeScript(\"CALC\",map)\nres = map.get(\"r\")\n```\n\nThe calling script leverages the implicit `service` variable (available to all scripts) to invoke the library script named CALC. \nIt also passes in the `a` and `b` as a Map object to the script. The response `r` is recovered from that same Map object. \nWhile this way works, it has a few downsides.\n1. It does not allow the library script to have multiple functions, becoming a true utility script. In this model you will be forced to create many such library scripts - each for one utility.\n2. The calling script spends a lot of code to setup the library script call dealing with java imports and java data structures.\n\nThe following example shows a simpler way to rewrite the CALC script, while helping the library scripts to be function based:\n\n\n\n```python\ndef mult(a,b):\n  return a*b\n  \n def add(a,b):\n  return a+b\n```\n\nNow it is possible to accommodate multiple utility modules in one library script. The following calling script can be used:\n\n```python\nres = service.invokeScript(\"CALC\",\"mult\",[2,3])\n```\n\nThis reduces the number of code lines significantly and removes the java Map imports, instead leveraging the native language (py) to do it all.\nIt also helps make the code more readable. These are just samples meant to demonstrate the library script concept and how `service` is leveraged to invoke those.\nThe real life examples would certainly include reusable business logic inside the library scripts.\n\n\nFor the script, there was no need to import or make any new py/js modules - it is all natively handled by Maximo. \nThe library scripts are no different that any other scripts in terms of storage, caching, compilation, and other aspects.\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/coreconcepts/libraryscripts.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}