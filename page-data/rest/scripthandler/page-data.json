{
    "componentChunkName": "component---src-pages-rest-scripthandler-mdx",
    "path": "/rest/scripthandler/",
    "result": {"pageContext":{"frontmatter":{"title":"Invoking script through Automation Script Handler"},"relativePagePath":"/rest/scripthandler.mdx","titleType":"append","MdxNode":{"id":"37e1c022-2c99-56e4-afe7-11837ae6b053","children":[],"parent":"8d701834-97d3-5c8e-9a74-86e665879e95","internal":{"content":"---\ntitle: Invoking script through Automation Script Handler\n---\nThe REST API can support most customer use cases for retrieving or processing data, through simple configuration. Occasionally, there are scenarios where that is difficult to do with existing APIs. In those cases you can create a script and not a launch point and call it with either a GET or POST like:\n\n```\nhttps://myurl.com/maximo/api/script/SCRIPTNAME?lean=1\n```\n\n## Implicit variables\n|Variable name|Description|\n|:-----------|:----------------------|\n|request|OslcRequest representation of the request being made. This exposes important methods such as request.getQueryParam(\"parameter\") and request.getHeader(\"header\") to retrieve values provided as a query parameter or header respectively. You can also access the UserInfo by calling request.getUserInfo().|\n|requestBody|A string representation of the data submitted on request (for POST/PATCH/PUT)|\n|httpMethod|Whether this was a GET, POST, PUT, etc. Can also be retrieved by calling request.getHttpMethod().|\n|responseBody|The script sets this as either a byte[] or String to return in the response. This is not required if you do not intend to return a response.|\n|responseHeaders|The script can provide additional headers to this HashMap to return to the calling application.|\n\n## Example script\n```python\n# This example will change the user's default insert site based on the query parameter. \n# This is different than setting it on the MAXUSER record because this updates for the current session.\nfrom psdi.server import MXServer\nmaxServer=MXServer.getMXServer()\nsiteid=request.getQueryParam(\"siteid\")\nif siteid and maxServer.isValidSite(siteid):\n    userInfo=request.getUserInfo()\n    userSet=maxServer.getMboSet(\"MAXUSER\",userInfo)\n    userSet.setQbeExactMatch(True)\n    userSet.setQbe(\"userid\",userInfo.getUserName())\n    userMbo=userSet.moveFirst()\n    if userMbo:\n        userMbo.setValue(\"DEFSITE\",siteid)\n        securityService=maxServer.lookup(\"SECURITY\")\n        securityService.refreshSecurityInfo(userInfo.getUserName(),userMbo,userMbo.getMboSet(\"PERSON\").getMbo(0))\n        userSet.save()\n    userSet.close()\nelse:\n    service.error(\"system\",\"invalidsite\",[siteid])\n```\n\nCall with a GET/POST request like: \n```\nhttps://myurl.com/maximo/oslc/script/setinsertsite?lean=1&siteid=BEDFORD\n```\n\n# Security\nOut of the box, any automation script can be called by an authenticated user via the REST API. There are two ways that this can be secured to restrict who can call these automation scripts.\n\n## Restrict the Script Handler\nIn the Object Structures application, under the More Actions open the \"Add/Modify API Route\" dialog. Filter for the name \"script\" and you should see two results (one for POST and one for GET requests). For each entry you can tie an application and option name that will require the user to have that specific permission to be able to use the script handler via the REST API. This will apply to all automation scripts.\n![Script Handler Security](scripthandlersecurity.jpg)\n\n## Restrict individual automation script\nIf you need more granular security (IE specific authorization for specific scripts) you can create two variables (authapp & authsigoption) on the automation script. These need to be a variable type of IN (or INOUT) with a binding type of LITERAL.\n![Script Handler Variables](scripthandlerscriptvars.jpg)","type":"Mdx","contentDigest":"7957f42af14d3674d882bc1ca62015a0","owner":"gatsby-plugin-mdx","counter":218},"frontmatter":{"title":"Invoking script through Automation Script Handler"},"exports":{},"rawBody":"---\ntitle: Invoking script through Automation Script Handler\n---\nThe REST API can support most customer use cases for retrieving or processing data, through simple configuration. Occasionally, there are scenarios where that is difficult to do with existing APIs. In those cases you can create a script and not a launch point and call it with either a GET or POST like:\n\n```\nhttps://myurl.com/maximo/api/script/SCRIPTNAME?lean=1\n```\n\n## Implicit variables\n|Variable name|Description|\n|:-----------|:----------------------|\n|request|OslcRequest representation of the request being made. This exposes important methods such as request.getQueryParam(\"parameter\") and request.getHeader(\"header\") to retrieve values provided as a query parameter or header respectively. You can also access the UserInfo by calling request.getUserInfo().|\n|requestBody|A string representation of the data submitted on request (for POST/PATCH/PUT)|\n|httpMethod|Whether this was a GET, POST, PUT, etc. Can also be retrieved by calling request.getHttpMethod().|\n|responseBody|The script sets this as either a byte[] or String to return in the response. This is not required if you do not intend to return a response.|\n|responseHeaders|The script can provide additional headers to this HashMap to return to the calling application.|\n\n## Example script\n```python\n# This example will change the user's default insert site based on the query parameter. \n# This is different than setting it on the MAXUSER record because this updates for the current session.\nfrom psdi.server import MXServer\nmaxServer=MXServer.getMXServer()\nsiteid=request.getQueryParam(\"siteid\")\nif siteid and maxServer.isValidSite(siteid):\n    userInfo=request.getUserInfo()\n    userSet=maxServer.getMboSet(\"MAXUSER\",userInfo)\n    userSet.setQbeExactMatch(True)\n    userSet.setQbe(\"userid\",userInfo.getUserName())\n    userMbo=userSet.moveFirst()\n    if userMbo:\n        userMbo.setValue(\"DEFSITE\",siteid)\n        securityService=maxServer.lookup(\"SECURITY\")\n        securityService.refreshSecurityInfo(userInfo.getUserName(),userMbo,userMbo.getMboSet(\"PERSON\").getMbo(0))\n        userSet.save()\n    userSet.close()\nelse:\n    service.error(\"system\",\"invalidsite\",[siteid])\n```\n\nCall with a GET/POST request like: \n```\nhttps://myurl.com/maximo/oslc/script/setinsertsite?lean=1&siteid=BEDFORD\n```\n\n# Security\nOut of the box, any automation script can be called by an authenticated user via the REST API. There are two ways that this can be secured to restrict who can call these automation scripts.\n\n## Restrict the Script Handler\nIn the Object Structures application, under the More Actions open the \"Add/Modify API Route\" dialog. Filter for the name \"script\" and you should see two results (one for POST and one for GET requests). For each entry you can tie an application and option name that will require the user to have that specific permission to be able to use the script handler via the REST API. This will apply to all automation scripts.\n![Script Handler Security](scripthandlersecurity.jpg)\n\n## Restrict individual automation script\nIf you need more granular security (IE specific authorization for specific scripts) you can create two variables (authapp & authsigoption) on the automation script. These need to be a variable type of IN (or INOUT) with a binding type of LITERAL.\n![Script Handler Variables](scripthandlerscriptvars.jpg)","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/rest/scripthandler.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}