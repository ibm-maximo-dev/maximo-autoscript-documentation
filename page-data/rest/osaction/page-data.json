{
    "componentChunkName": "component---src-pages-rest-osaction-mdx",
    "path": "/rest/osaction/",
    "result": {"pageContext":{"frontmatter":{"title":"Object Structure Action"},"relativePagePath":"/rest/osaction.mdx","titleType":"append","MdxNode":{"id":"842ada8d-1183-5806-99eb-bbc542c576c9","children":[],"parent":"d0884aec-2205-522f-9505-6cd2afd47d83","internal":{"content":"---\ntitle: Object Structure Action\n---\nWhen you need to call a custom action on your Mbo (or MboSet) from the REST API you can define an Object Structure Action. Currently this is specific to each object structure but will be enhanced in Manage 8.3/TPAE 7.6.1.3 so that you can define these as System Actions to be used across all Object Structures. \n\n## Implicit variables\n|Variable name|Description|\n|:-----------|:----------------------|\n|request|OslcRequest representation of the request being made. This exposes methods such as request.getQueryParam(\"parameter\") & request.getHeader(\"header\") to retrieve values provided as a query parameter or header respectively. You can also access the UserInfo by calling request.getUserInfo().|\n|requestBody|The body of the request if one was provided.|\n|httpMethod|Whether this was a GET, POST, PUT, etc. Can also be retrieved by calling request.getHttpMethod().|\n|mbo|This is the Mbo for the main object of the object structure.|\n|mboset|This is the MboSet for the main object of your object structure.|\n\n**Step 1** In the Automation Script application, create a Script for Integration and choose the Object Structure. Select the radio button for Action Processing and give it a unique name. Provide the script source.\n![Action Script Creation](osactiondefinition.jpg)\n\n**Step 2** In the Object Structures application, open the Object Structure used in Step 1. From the More Actions open the Action Definition dialog and add a new row.\n\n** Step 3** Provide a name & description. I recommend setting the Action name to match the script action name (SENDCOMM in our example). Set the Implementation Type to Script and select the script created in Step 1. (Optionally) Select the \"Collection Action\" option if your action is intended to be used on the set (doesn't require a specific record). (Optionally) Provide an Option Name if you wish to restrict this to a signature option. I'd recommend if it modifies the record to at least tie it to the SAVE permission.  \n\n## Example Script\n```python\ntemplate=request.getQueryParam(\"template\")\nif template:\n    commMbo=mbo.createComm()\n    commMbo.setValue(\"TEMPLATEID\", template)\n    commMbo.sendMessage()\n```\n\nCall with a POST request like: \n```\nhttps://myurl.com/maximo/api/os/mxapisr/_U1IvMTA2Nw--?lean=1&action=SENDCOMM&template=1014\n```\n\n**NOTE:** Be sure to utilize the x-method-override header of PATCH when acting on an existing record. ","type":"Mdx","contentDigest":"d889d62195a85fe8dee85d79760f3960","owner":"gatsby-plugin-mdx","counter":174},"frontmatter":{"title":"Object Structure Action"},"exports":{},"rawBody":"---\ntitle: Object Structure Action\n---\nWhen you need to call a custom action on your Mbo (or MboSet) from the REST API you can define an Object Structure Action. Currently this is specific to each object structure but will be enhanced in Manage 8.3/TPAE 7.6.1.3 so that you can define these as System Actions to be used across all Object Structures. \n\n## Implicit variables\n|Variable name|Description|\n|:-----------|:----------------------|\n|request|OslcRequest representation of the request being made. This exposes methods such as request.getQueryParam(\"parameter\") & request.getHeader(\"header\") to retrieve values provided as a query parameter or header respectively. You can also access the UserInfo by calling request.getUserInfo().|\n|requestBody|The body of the request if one was provided.|\n|httpMethod|Whether this was a GET, POST, PUT, etc. Can also be retrieved by calling request.getHttpMethod().|\n|mbo|This is the Mbo for the main object of the object structure.|\n|mboset|This is the MboSet for the main object of your object structure.|\n\n**Step 1** In the Automation Script application, create a Script for Integration and choose the Object Structure. Select the radio button for Action Processing and give it a unique name. Provide the script source.\n![Action Script Creation](osactiondefinition.jpg)\n\n**Step 2** In the Object Structures application, open the Object Structure used in Step 1. From the More Actions open the Action Definition dialog and add a new row.\n\n** Step 3** Provide a name & description. I recommend setting the Action name to match the script action name (SENDCOMM in our example). Set the Implementation Type to Script and select the script created in Step 1. (Optionally) Select the \"Collection Action\" option if your action is intended to be used on the set (doesn't require a specific record). (Optionally) Provide an Option Name if you wish to restrict this to a signature option. I'd recommend if it modifies the record to at least tie it to the SAVE permission.  \n\n## Example Script\n```python\ntemplate=request.getQueryParam(\"template\")\nif template:\n    commMbo=mbo.createComm()\n    commMbo.setValue(\"TEMPLATEID\", template)\n    commMbo.sendMessage()\n```\n\nCall with a POST request like: \n```\nhttps://myurl.com/maximo/api/os/mxapisr/_U1IvMTA2Nw--?lean=1&action=SENDCOMM&template=1014\n```\n\n**NOTE:** Be sure to utilize the x-method-override header of PATCH when acting on an existing record. ","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/rest/osaction.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}