{
    "componentChunkName": "component---src-pages-integration-mdb-mdx",
    "path": "/integration/mdb/",
    "result": {"pageContext":{"frontmatter":{"title":"Message driven bean scripting"},"relativePagePath":"/integration/mdb.mdx","titleType":"append","MdxNode":{"id":"dece7af1-7eea-5855-8823-f3f47266ea6f","children":[],"parent":"11dcd3c6-aeac-504d-8062-dc44dc9175ec","internal":{"content":"---\ntitle: Message driven bean scripting\n---\n\nCustomers often need to add new Message Driven Beans for consuming messages from an external JMS server. \nMaximo scripted MDBs from 7.6.1.3 or 8.8. \n\nTo set up MDB with scripting:\n\n1. Create the following vanilla py script (for example, named as CUSTMDB).\n\n```python\nservice.log(\"msg received with id \"+str(jmsmsg.getJMSMessageID()))\n```\n\nNote that `jmsmsg` refers to the `javax.jms.Message` object representing the message from the JMS queue.\n\n2. Assume that you are going to consume message from an external continous queue named extcqin. Therefore, you will use the external system EXTSYS1 to import a file. For example, you import an asset with the content.\n\n3. Modify the mboejb ejb jar xml to add a script MDB using the ejb-jar.xml file. This connects the script to the MDB.\n\n```xml\n    <message-driven id=\"MessageDriven_JMSContQueueProcessor_3\">\n      <ejb-name>JMSScriptListenerBean-1</ejb-name>\n      <ejb-class>psdi.iface.jms.JMSScriptListenerBean</ejb-class>\n      <transaction-type>Container</transaction-type>\n      <message-destination-type>javax.jms.Queue</message-destination-type>\n\t  \t\t      <env-entry>\n\t\t\t<env-entry-name>SCRIPTNAME</env-entry-name>\n\t\t\t<env-entry-type>java.lang.String</env-entry-type>\n\t\t\t<env-entry-value>CUSTMDB</env-entry-value>\n\t\t      </env-entry>      \n    </message-driven>\n```\nNote the ejb class `psdi.iface.jms.JMSScriptListenerBean` and the env entry `SCRIPTNAME` has the name of the script.\nA script on an object structure such as MXITEM, can impact the processing of item data through REST, application Import, Enterprise Service and Invocation/Publish Channel.\n\n4. Deploy the customization. \n\nAssuming that the activation spec and queue setup are all done, you should be able to see the log statement appear as you start pushing messages into the queue.\n\n","type":"Mdx","contentDigest":"b45f14f6cbc0ffa0c93af18479896fee","owner":"gatsby-plugin-mdx","counter":196},"frontmatter":{"title":"Message driven bean scripting"},"exports":{},"rawBody":"---\ntitle: Message driven bean scripting\n---\n\nCustomers often need to add new Message Driven Beans for consuming messages from an external JMS server. \nMaximo scripted MDBs from 7.6.1.3 or 8.8. \n\nTo set up MDB with scripting:\n\n1. Create the following vanilla py script (for example, named as CUSTMDB).\n\n```python\nservice.log(\"msg received with id \"+str(jmsmsg.getJMSMessageID()))\n```\n\nNote that `jmsmsg` refers to the `javax.jms.Message` object representing the message from the JMS queue.\n\n2. Assume that you are going to consume message from an external continous queue named extcqin. Therefore, you will use the external system EXTSYS1 to import a file. For example, you import an asset with the content.\n\n3. Modify the mboejb ejb jar xml to add a script MDB using the ejb-jar.xml file. This connects the script to the MDB.\n\n```xml\n    <message-driven id=\"MessageDriven_JMSContQueueProcessor_3\">\n      <ejb-name>JMSScriptListenerBean-1</ejb-name>\n      <ejb-class>psdi.iface.jms.JMSScriptListenerBean</ejb-class>\n      <transaction-type>Container</transaction-type>\n      <message-destination-type>javax.jms.Queue</message-destination-type>\n\t  \t\t      <env-entry>\n\t\t\t<env-entry-name>SCRIPTNAME</env-entry-name>\n\t\t\t<env-entry-type>java.lang.String</env-entry-type>\n\t\t\t<env-entry-value>CUSTMDB</env-entry-value>\n\t\t      </env-entry>      \n    </message-driven>\n```\nNote the ejb class `psdi.iface.jms.JMSScriptListenerBean` and the env entry `SCRIPTNAME` has the name of the script.\nA script on an object structure such as MXITEM, can impact the processing of item data through REST, application Import, Enterprise Service and Invocation/Publish Channel.\n\n4. Deploy the customization. \n\nAssuming that the activation spec and queue setup are all done, you should be able to see the log statement appear as you start pushing messages into the queue.\n\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/integration/mdb.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}