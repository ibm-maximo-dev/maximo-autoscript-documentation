{
    "componentChunkName": "component---src-pages-integration-mdb-mdx",
    "path": "/integration/mdb/",
    "result": {"pageContext":{"frontmatter":{"title":"Message Driven Bean Scripting"},"relativePagePath":"/integration/mdb.mdx","titleType":"append","MdxNode":{"id":"dece7af1-7eea-5855-8823-f3f47266ea6f","children":[],"parent":"11dcd3c6-aeac-504d-8062-dc44dc9175ec","internal":{"content":"---\ntitle: Message Driven Bean Scripting\n---\n\nCustomers often need to add new Message Driven Beans for consuming messages from an external JMS server. \nStarting 7613/8.8 Maximo scripted MDBs. \n\nSteps for setting up MDB with scripting:\n\n1. create a vanilla py script (say named as CUSTMDB) like below\n\n```python\nservice.log(\"msg received with id \"+str(jmsmsg.getJMSMessageID()))\n```\n\nNote that `jmsmsg` refers to the `javax.jms.Message` object representing the message from the JMS queue.\n\n2. Assume that we are going to consume message from an external continouls queue named extcqin. So we will use external system EXTSYS1 to import a file - like say an asset with the content\n\n3. modify the mboejb ejb jar xml to add a script MDB using the ejb-jar.xml file. This will connect the script to the MDB\n\n```xml\n    <message-driven id=\"MessageDriven_JMSContQueueProcessor_3\">\n      <ejb-name>JMSScriptListenerBean-1</ejb-name>\n      <ejb-class>psdi.iface.jms.JMSScriptListenerBean</ejb-class>\n      <transaction-type>Container</transaction-type>\n      <message-destination-type>javax.jms.Queue</message-destination-type>\n\t  \t\t      <env-entry>\n\t\t\t<env-entry-name>SCRIPTNAME</env-entry-name>\n\t\t\t<env-entry-type>java.lang.String</env-entry-type>\n\t\t\t<env-entry-value>CUSTMDB</env-entry-value>\n\t\t      </env-entry>      \n    </message-driven>\n```\nNote the ejb class `psdi.iface.jms.JMSScriptListenerBean` and the env entry `SCRIPTNAME` that has the name of the script.\nA script on an object structure such as MXITEM, can impact the processing of item data through REST, application Import, Enterprise Service and Invocation/Publish Channel.\n\n4. deploy the customization. \n\nAssuming that the activation spec and queue setup are all done, we should be able to see the log statement appear as we start pushing messages into the queue.\n\n","type":"Mdx","contentDigest":"7ed0bd495f3c2bc4cb5d0a099a82964c","owner":"gatsby-plugin-mdx","counter":157},"frontmatter":{"title":"Message Driven Bean Scripting"},"exports":{},"rawBody":"---\ntitle: Message Driven Bean Scripting\n---\n\nCustomers often need to add new Message Driven Beans for consuming messages from an external JMS server. \nStarting 7613/8.8 Maximo scripted MDBs. \n\nSteps for setting up MDB with scripting:\n\n1. create a vanilla py script (say named as CUSTMDB) like below\n\n```python\nservice.log(\"msg received with id \"+str(jmsmsg.getJMSMessageID()))\n```\n\nNote that `jmsmsg` refers to the `javax.jms.Message` object representing the message from the JMS queue.\n\n2. Assume that we are going to consume message from an external continouls queue named extcqin. So we will use external system EXTSYS1 to import a file - like say an asset with the content\n\n3. modify the mboejb ejb jar xml to add a script MDB using the ejb-jar.xml file. This will connect the script to the MDB\n\n```xml\n    <message-driven id=\"MessageDriven_JMSContQueueProcessor_3\">\n      <ejb-name>JMSScriptListenerBean-1</ejb-name>\n      <ejb-class>psdi.iface.jms.JMSScriptListenerBean</ejb-class>\n      <transaction-type>Container</transaction-type>\n      <message-destination-type>javax.jms.Queue</message-destination-type>\n\t  \t\t      <env-entry>\n\t\t\t<env-entry-name>SCRIPTNAME</env-entry-name>\n\t\t\t<env-entry-type>java.lang.String</env-entry-type>\n\t\t\t<env-entry-value>CUSTMDB</env-entry-value>\n\t\t      </env-entry>      \n    </message-driven>\n```\nNote the ejb class `psdi.iface.jms.JMSScriptListenerBean` and the env entry `SCRIPTNAME` that has the name of the script.\nA script on an object structure such as MXITEM, can impact the processing of item data through REST, application Import, Enterprise Service and Invocation/Publish Channel.\n\n4. deploy the customization. \n\nAssuming that the activation spec and queue setup are all done, we should be able to see the log statement appear as we start pushing messages into the queue.\n\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/integration/mdb.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}