{
    "componentChunkName": "component---src-pages-integration-endpointhandler-mdx",
    "path": "/integration/endpointhandler/",
    "result": {"pageContext":{"frontmatter":{"title":"Endpoint Script"},"relativePagePath":"/integration/endpointhandler.mdx","titleType":"append","MdxNode":{"id":"59517722-ddeb-5742-9656-97ae15da9493","children":[],"parent":"d3d3a24f-4aa1-5fff-97e6-d6823a3d6efa","internal":{"content":"---\ntitle: Endpoint Script\n---\n\nWe can write MIF endpoint handlers using automation script. For example say we want to write\na handler for sending emails. This is something that is not there out of the box in Maximo. The\nsteps to do for this would be:\n\n\n1. 1.Use the Add/Modify handlers action from the endpoint application to add a new handler. We are going to name it SCRIPT and we are going to set the class name to be com.ibm.tivoli.maximo.script.ScriptRouterHandler. Note that this handler is there OOTB in any maximo 7612 onwards.\n2. 2.We are now going to create a new endpoint for that handler Endpoints app.\n3. 3.We set the handler to be SCRIPT.\n4. 4.We need to set the \"script\" property to the name of the script that we are going to write. For example say we name the script \"emailme\".\n5. 5.We now got to create a script named \"emailme\".\n\n\nBelow table shows the implicit variables specific to these endpoint scripts.\n\n\n|Variable|Purpose|\n|:--------------|:---------------------------------------------------------|\n|requestData|byte[] data for endpoints.|\n|requestDataS|String data for endpoints. Note if the byte[] cannot be converted to String - this variable is not set|\n|responseData|This is a OUT implicit variable. The endpoint script code can set it to store the response from the actual endpoint call. This can be set as a String or a byte[].|\n\n\nAll endpoint `metaData` content is set as variables to the script. This would imply that in case of Publish Channel endpoints - all JMS/Kafka messages headers will be set as variables in the script. \nThis would imply that variables like `destination` would be available and set to the external system name for that endpoint script. \n\n\nThe script code can be as simple as\n\n```python\nfrom psdi.server import MXServer\nfrom java.lang import String\n\nMXServer.getMXServer().sendEMail( to,from,subject, String(requestData))\n```\n\nNote in here, we can define the from and to as literal variables in the script and then set the\nemail addresses there. We can also define another literal variable called subject to define a\nstatic subject for the email like \"Email from Maximo\". We can make it more dynamic and fancy\nby getting the `to` email from the data etc.\n\nAnother example below show cases how to write a custom web service handler that uses WS-Security UserNameToken - \nwhich is not supported out of the box in MIF WebService Handler. The script code below leverages the JAXWSClient utility to set WS-Security UserNameToken.\n\n```python\nfrom org.jdom import Element\nfrom org.jdom import Namespace\nfrom psdi.iface.webservices import JAXWSClient\nfrom java.util import HashMap\nfrom java.util import ArrayList\nfrom psdi.iface.util import XMLUtils\nfrom javax.xml.namespace import QName\n\nns = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n\nsecQName = QName(ns, \"Security\")\nsec = Element(\"Security\",ns)\n\nwsu = Namespace.getNamespace(\"wsu\",\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\")\nsec.addNamespaceDeclaration(wsu)\nunt = Element(\"UsernameToken\", ns)\nsec.addContent(unt)\nunt.setAttribute(\"Id\", \"UsernameToken-61F4CA1CC16641CEA914170628622665\", wsu)\nun = Element(\"Username\", ns)\nun.setText(\"testusermaximo\")\nunt.addContent(un)\n\t\t\npwd = Element(\"Password\", ns)\nunt.addContent(pwd)\npwd.setAttribute(\"Type\",\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\")\npwd.setText(\"WinterTime15\")\ncl = JAXWSClient()\n\nlist = ArrayList()\nlist.add(XMLUtils.convertElementToString(sec))\nsoapHeaders = HashMap()\nsoapHeaders.put(secQName, list)\n\nlist = ArrayList()\nlist.add(\"d2lsc29uOndpbHNvbg==\")\nhttpHeaders = HashMap()\nhttpHeaders.put(\"maxauth\", list)\n\n\nresponseData = cl.invoke(requestData, \"test\", \"http://host:port/meaweb/services/SYSTEM\", \"urn:action\", \"SOAP11\", None, None, None, httpHeaders, 10000, 10000, soapHeaders, None)\n```\n\nAs apparent from above, the code leverages the jdom library that ships with Maximo Manage to create the security header. \nThe script code above hard codes the user/password, but that can be script literal variables. \nSame goes with the urls to invoke (like in this case /meaweb/services/SYSTEM) and other input parameters to the cl.invoke(..) call.\nThe code shows how to add the soap headers as well as http headers as an example.\n\n\n## HTTP Handler Exit\n\n\nHTTP handler provides an exit that can be leveraged to intercept and modify the request and response. \nThe HTTPEXIT property of the handler endpoint can be set to a value like script:{script name} to register a scripted exit for the http endpoint.\nBelow we provide the set of callback functions that such a script will support.\n\n\n|Script Http Handler Exit methods|Purpose|\n|:-----------|:---------------------------------------------------------|\n|urlProps(req)|Used for adding query params to a configured url. The req object is the implemented by `psdi.iface.router. ScriptHTTPReq`. Use the api `req.addUrlProp(propname,propvalue)` to set the URL query parameters.|\n|getUrl(req)|Used for setting the url for http call. Use the api `req.setUrl(url)` to set the new URL.|\n|headerProps(req)|Used for setting request headers for the http call. Use the api `req.addHeader(propname,propvalue)` to set the http request headers.|\n|processResponse(resp)|Used for processing http response. The resp object is implemented by `psdi.iface.router.ScriptHTTPResp`. Use the api resp.setError(java.util.Exception) to mark the response for Error and the Error message. We can use the resp.getData() to get the response data and analyze that in the script.| \n\n\n### ScriptHTTPReq details\n\n|ScriptHTTPReq methods|Purpose|\n|:-----------|:---------------------------------------------------------|\n|getData()|Used to get byte[] data that has been passed to the endpoint.|\n|getSData()|Used to get String data that has been passed to the endpoint.|\n|getMetaData()|used for getting the metadata `java.util.Map` object that was passed in to the endpoint. This contains some of the jms/kafka message headers.|\n|getEndPointName())|Used for getting the endpoint name (string).|\n|setURL(String url)|sets the url to be called. This override the url if that is set in the endpoint configuration|\n|getURL()|return the url (string) to be invoked.|\n|addHeader(String name, String value)|add an http header/value pair to the request.|\n|getHeaderProps()|get the http header/value `java.util.Map` for the request.|\n|addUrlProp(String name, String value)|add an http url query param/value pair to the request.|\n|getUrlProps()|get the http query param/value `java.util.Map` for the request.|\n|addFormProp(String name, String value)|add an http form param/value pair to the request.|\n|getFormProps()|get the http form param/value `java.util.Map` for the request.|\n\n\n### ScriptHTTPResp details\n\n|ScriptHTTPResp methods|Purpose|\n|:-----------|:---------------------------------------------------------|\n|getData()|Used to get byte[] data response.|\n|getMetaData()|used for getting the metadata `java.util.Map` object that was passed in to the endpoint. This contains some of the jms/kafka message headers.|\n|getEndPointName)|Used for getting the endpoint name (string).|\n|geResponseMsg()|returns the response status message from the http call|\n|getResponseCode()|return the http response code.|\n|setError(Exception e)|sets the error ( `java.lang.Exception instance`) by analyzing the http response.|\n\n\n\n\n\n## Web Service Handler Exit\n\n\nSimilar to HTTP Handler, Web Service handler also provides an exit that can be leveraged to intercept and modify the SOAP request and response. \nThe WSEXIT property of the handler endpoint can be set to a value like script:{script name} to register a scripted exit for the web service endpoint.\nBelow we provide the set of callback functions that such a script will support.\n\n\n|Script Web Service Handler Exit methods|Purpose|\n|:-----------|:---------------------------------------------------------|\n|responseOk(resp)|Used for analyzing an good response from the external web service. The resp object is implemented by the `psdi.iface.router.ScriptSOAPResp` object. This can be leveraged to either do some processing with the response or set an error|\n|responseError(resp)|Used for analyzing (and taking action if needed) an error response from the external web service. The resp object is implemented by the `psdi.iface.router.ScriptSOAPResp` object.|\n|setupHeaders(req)|Used for setting request soap headers for the soap call. The req object is implemented by the `psdi.iface.router.ScriptSOAPReq` object.|\n\n\n### ScriptSOAPReq details\n\n|ScriptSOAPReq methods|Purpose|\n|:-----------|:---------------------------------------------------------|\n|getData()|Used to get byte[] data that has been passed to the endpoint.|\n|getMetaData()|used for getting the metadata `java.util.Map` object that was passed in to the endpoint. This contains some of the jms/kafka message headers.|\n|getEndPointName())|Used for getting the endpoint name (string).|\n|setURL(String url)|sets the url to be called. This override the url if that is set in the endpoint configuration|\n|getURL()|return the url (string) to be invoked.|\n|addHeader(String ns, String name, String value)|add s soap header/value pair to the request. `ns` specifies the namespace for the header element. An example below shows the usage.|\n|getHeaderProps()|get the soap header/value `Map<QName,List<String>>` for the request.|\n\n\n### ScriptSOAPResp details\n\n\n|ScriptSOAPResp methods|Purpose|\n|:-----------|:---------------------------------------------------------|\n|getData()|Used to get byte[] data response.|\n|getMetaData()|used for getting the metadata `java.util.Map` object that was passed in to the endpoint. This contains some of the jms/kafka message headers.|\n|getEndPointName)|Used for getting the endpoint name (string).|\n|setError(Exception e)|sets the error ( `java.lang.Exception instance`) by analyzing the soap response.|\n\n\nA sample code below shows how a WS Security header can be set using the setupHeaders.\n\n\n```python\nfrom org.jdom import Element\nfrom org.jdom import Namespace\n\nfrom java.util import HashMap\nfrom java.util import ArrayList\nfrom psdi.iface.util import XMLUtils\nfrom javax.xml.namespace import QName\n\ndef setupHeaders(req):\n\n\tns = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n\n\tsecQName = QName(ns, \"Security\")\n\tsec = Element(\"Security\",ns)\n\n\twsu = Namespace.getNamespace(\"wsu\",\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\")\n\tsec.addNamespaceDeclaration(wsu)\n\tunt = Element(\"UsernameToken\", ns)\n\tsec.addContent(unt)\n\tunt.setAttribute(\"Id\", \"UsernameToken-61F4CA1CC16641CEA914170628622665\", wsu)\n\tun = Element(\"Username\", ns)\n\tun.setText(\"testusermaximo\")\n\tunt.addContent(un)\n\t\t\t\n\tpwd = Element(\"Password\", ns)\n\tunt.addContent(pwd)\n\tpwd.setAttribute(\"Type\",\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\")\n\tpwd.setText(\"WinterTime15\")\n\n\theaderVal = XMLUtils.convertElementToString(sec)\n\treq.addHeader(ns, \"Security\", headerVal)\n```\n\n\n\n","type":"Mdx","contentDigest":"a12633557fcbcae1433401dcddf4fb3a","owner":"gatsby-plugin-mdx","counter":152},"frontmatter":{"title":"Endpoint Script"},"exports":{},"rawBody":"---\ntitle: Endpoint Script\n---\n\nWe can write MIF endpoint handlers using automation script. For example say we want to write\na handler for sending emails. This is something that is not there out of the box in Maximo. The\nsteps to do for this would be:\n\n\n1. 1.Use the Add/Modify handlers action from the endpoint application to add a new handler. We are going to name it SCRIPT and we are going to set the class name to be com.ibm.tivoli.maximo.script.ScriptRouterHandler. Note that this handler is there OOTB in any maximo 7612 onwards.\n2. 2.We are now going to create a new endpoint for that handler Endpoints app.\n3. 3.We set the handler to be SCRIPT.\n4. 4.We need to set the \"script\" property to the name of the script that we are going to write. For example say we name the script \"emailme\".\n5. 5.We now got to create a script named \"emailme\".\n\n\nBelow table shows the implicit variables specific to these endpoint scripts.\n\n\n|Variable|Purpose|\n|:--------------|:---------------------------------------------------------|\n|requestData|byte[] data for endpoints.|\n|requestDataS|String data for endpoints. Note if the byte[] cannot be converted to String - this variable is not set|\n|responseData|This is a OUT implicit variable. The endpoint script code can set it to store the response from the actual endpoint call. This can be set as a String or a byte[].|\n\n\nAll endpoint `metaData` content is set as variables to the script. This would imply that in case of Publish Channel endpoints - all JMS/Kafka messages headers will be set as variables in the script. \nThis would imply that variables like `destination` would be available and set to the external system name for that endpoint script. \n\n\nThe script code can be as simple as\n\n```python\nfrom psdi.server import MXServer\nfrom java.lang import String\n\nMXServer.getMXServer().sendEMail( to,from,subject, String(requestData))\n```\n\nNote in here, we can define the from and to as literal variables in the script and then set the\nemail addresses there. We can also define another literal variable called subject to define a\nstatic subject for the email like \"Email from Maximo\". We can make it more dynamic and fancy\nby getting the `to` email from the data etc.\n\nAnother example below show cases how to write a custom web service handler that uses WS-Security UserNameToken - \nwhich is not supported out of the box in MIF WebService Handler. The script code below leverages the JAXWSClient utility to set WS-Security UserNameToken.\n\n```python\nfrom org.jdom import Element\nfrom org.jdom import Namespace\nfrom psdi.iface.webservices import JAXWSClient\nfrom java.util import HashMap\nfrom java.util import ArrayList\nfrom psdi.iface.util import XMLUtils\nfrom javax.xml.namespace import QName\n\nns = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n\nsecQName = QName(ns, \"Security\")\nsec = Element(\"Security\",ns)\n\nwsu = Namespace.getNamespace(\"wsu\",\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\")\nsec.addNamespaceDeclaration(wsu)\nunt = Element(\"UsernameToken\", ns)\nsec.addContent(unt)\nunt.setAttribute(\"Id\", \"UsernameToken-61F4CA1CC16641CEA914170628622665\", wsu)\nun = Element(\"Username\", ns)\nun.setText(\"testusermaximo\")\nunt.addContent(un)\n\t\t\npwd = Element(\"Password\", ns)\nunt.addContent(pwd)\npwd.setAttribute(\"Type\",\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\")\npwd.setText(\"WinterTime15\")\ncl = JAXWSClient()\n\nlist = ArrayList()\nlist.add(XMLUtils.convertElementToString(sec))\nsoapHeaders = HashMap()\nsoapHeaders.put(secQName, list)\n\nlist = ArrayList()\nlist.add(\"d2lsc29uOndpbHNvbg==\")\nhttpHeaders = HashMap()\nhttpHeaders.put(\"maxauth\", list)\n\n\nresponseData = cl.invoke(requestData, \"test\", \"http://host:port/meaweb/services/SYSTEM\", \"urn:action\", \"SOAP11\", None, None, None, httpHeaders, 10000, 10000, soapHeaders, None)\n```\n\nAs apparent from above, the code leverages the jdom library that ships with Maximo Manage to create the security header. \nThe script code above hard codes the user/password, but that can be script literal variables. \nSame goes with the urls to invoke (like in this case /meaweb/services/SYSTEM) and other input parameters to the cl.invoke(..) call.\nThe code shows how to add the soap headers as well as http headers as an example.\n\n\n## HTTP Handler Exit\n\n\nHTTP handler provides an exit that can be leveraged to intercept and modify the request and response. \nThe HTTPEXIT property of the handler endpoint can be set to a value like script:{script name} to register a scripted exit for the http endpoint.\nBelow we provide the set of callback functions that such a script will support.\n\n\n|Script Http Handler Exit methods|Purpose|\n|:-----------|:---------------------------------------------------------|\n|urlProps(req)|Used for adding query params to a configured url. The req object is the implemented by `psdi.iface.router. ScriptHTTPReq`. Use the api `req.addUrlProp(propname,propvalue)` to set the URL query parameters.|\n|getUrl(req)|Used for setting the url for http call. Use the api `req.setUrl(url)` to set the new URL.|\n|headerProps(req)|Used for setting request headers for the http call. Use the api `req.addHeader(propname,propvalue)` to set the http request headers.|\n|processResponse(resp)|Used for processing http response. The resp object is implemented by `psdi.iface.router.ScriptHTTPResp`. Use the api resp.setError(java.util.Exception) to mark the response for Error and the Error message. We can use the resp.getData() to get the response data and analyze that in the script.| \n\n\n### ScriptHTTPReq details\n\n|ScriptHTTPReq methods|Purpose|\n|:-----------|:---------------------------------------------------------|\n|getData()|Used to get byte[] data that has been passed to the endpoint.|\n|getSData()|Used to get String data that has been passed to the endpoint.|\n|getMetaData()|used for getting the metadata `java.util.Map` object that was passed in to the endpoint. This contains some of the jms/kafka message headers.|\n|getEndPointName())|Used for getting the endpoint name (string).|\n|setURL(String url)|sets the url to be called. This override the url if that is set in the endpoint configuration|\n|getURL()|return the url (string) to be invoked.|\n|addHeader(String name, String value)|add an http header/value pair to the request.|\n|getHeaderProps()|get the http header/value `java.util.Map` for the request.|\n|addUrlProp(String name, String value)|add an http url query param/value pair to the request.|\n|getUrlProps()|get the http query param/value `java.util.Map` for the request.|\n|addFormProp(String name, String value)|add an http form param/value pair to the request.|\n|getFormProps()|get the http form param/value `java.util.Map` for the request.|\n\n\n### ScriptHTTPResp details\n\n|ScriptHTTPResp methods|Purpose|\n|:-----------|:---------------------------------------------------------|\n|getData()|Used to get byte[] data response.|\n|getMetaData()|used for getting the metadata `java.util.Map` object that was passed in to the endpoint. This contains some of the jms/kafka message headers.|\n|getEndPointName)|Used for getting the endpoint name (string).|\n|geResponseMsg()|returns the response status message from the http call|\n|getResponseCode()|return the http response code.|\n|setError(Exception e)|sets the error ( `java.lang.Exception instance`) by analyzing the http response.|\n\n\n\n\n\n## Web Service Handler Exit\n\n\nSimilar to HTTP Handler, Web Service handler also provides an exit that can be leveraged to intercept and modify the SOAP request and response. \nThe WSEXIT property of the handler endpoint can be set to a value like script:{script name} to register a scripted exit for the web service endpoint.\nBelow we provide the set of callback functions that such a script will support.\n\n\n|Script Web Service Handler Exit methods|Purpose|\n|:-----------|:---------------------------------------------------------|\n|responseOk(resp)|Used for analyzing an good response from the external web service. The resp object is implemented by the `psdi.iface.router.ScriptSOAPResp` object. This can be leveraged to either do some processing with the response or set an error|\n|responseError(resp)|Used for analyzing (and taking action if needed) an error response from the external web service. The resp object is implemented by the `psdi.iface.router.ScriptSOAPResp` object.|\n|setupHeaders(req)|Used for setting request soap headers for the soap call. The req object is implemented by the `psdi.iface.router.ScriptSOAPReq` object.|\n\n\n### ScriptSOAPReq details\n\n|ScriptSOAPReq methods|Purpose|\n|:-----------|:---------------------------------------------------------|\n|getData()|Used to get byte[] data that has been passed to the endpoint.|\n|getMetaData()|used for getting the metadata `java.util.Map` object that was passed in to the endpoint. This contains some of the jms/kafka message headers.|\n|getEndPointName())|Used for getting the endpoint name (string).|\n|setURL(String url)|sets the url to be called. This override the url if that is set in the endpoint configuration|\n|getURL()|return the url (string) to be invoked.|\n|addHeader(String ns, String name, String value)|add s soap header/value pair to the request. `ns` specifies the namespace for the header element. An example below shows the usage.|\n|getHeaderProps()|get the soap header/value `Map<QName,List<String>>` for the request.|\n\n\n### ScriptSOAPResp details\n\n\n|ScriptSOAPResp methods|Purpose|\n|:-----------|:---------------------------------------------------------|\n|getData()|Used to get byte[] data response.|\n|getMetaData()|used for getting the metadata `java.util.Map` object that was passed in to the endpoint. This contains some of the jms/kafka message headers.|\n|getEndPointName)|Used for getting the endpoint name (string).|\n|setError(Exception e)|sets the error ( `java.lang.Exception instance`) by analyzing the soap response.|\n\n\nA sample code below shows how a WS Security header can be set using the setupHeaders.\n\n\n```python\nfrom org.jdom import Element\nfrom org.jdom import Namespace\n\nfrom java.util import HashMap\nfrom java.util import ArrayList\nfrom psdi.iface.util import XMLUtils\nfrom javax.xml.namespace import QName\n\ndef setupHeaders(req):\n\n\tns = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n\n\tsecQName = QName(ns, \"Security\")\n\tsec = Element(\"Security\",ns)\n\n\twsu = Namespace.getNamespace(\"wsu\",\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\")\n\tsec.addNamespaceDeclaration(wsu)\n\tunt = Element(\"UsernameToken\", ns)\n\tsec.addContent(unt)\n\tunt.setAttribute(\"Id\", \"UsernameToken-61F4CA1CC16641CEA914170628622665\", wsu)\n\tun = Element(\"Username\", ns)\n\tun.setText(\"testusermaximo\")\n\tunt.addContent(un)\n\t\t\t\n\tpwd = Element(\"Password\", ns)\n\tunt.addContent(pwd)\n\tpwd.setAttribute(\"Type\",\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\")\n\tpwd.setText(\"WinterTime15\")\n\n\theaderVal = XMLUtils.convertElementToString(sec)\n\treq.addHeader(ns, \"Security\", headerVal)\n```\n\n\n\n","fileAbsolutePath":"/home/sls/git/maximo-app-framework/maximo-autoscript-documentation/src/pages/integration/endpointhandler.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}