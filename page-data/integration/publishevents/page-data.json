{
    "componentChunkName": "component---src-pages-integration-publishevents-mdx",
    "path": "/integration/publishevents/",
    "result": {"pageContext":{"frontmatter":{"title":"Publish Channel Scripting"},"relativePagePath":"/integration/publishevents.mdx","titleType":"append","MdxNode":{"id":"c6c9551f-3be1-5620-bff3-3e95cd4dcea3","children":[],"parent":"a5e9498d-a61f-579e-be9a-f8d7472e870d","internal":{"content":"---\ntitle: Publish Channel Scripting\n---\n\nPublish Channels provide the outbound integration backbone of Maximo. They can be\nevent enabled such that when some Mbo’s change their state (ie they get added, updated or\ndeleted) these channels can trap those events and publish a message to the outbound JMS\nqueues. We can also do some offline exports using the channel from the Integration External systems application or from cron jobs invoking the export api of the channel.\nThe messages then get picked up from those queues and get pushed to their final\ndestination (using the endpoint/handler framework). Publish channels support the below script points:\n\n\n|Script Point|Purpose|\n|:--------------|:---------------------------------------------------------|\n|Event Filters|Used for smart filtering of publish channel events|\n|External Exits|Used for data transformation of outbound messages from Maximo format (`irData`) to external format `erData`|\n|User Exit (Before External Exit)|Used data updation without structural change to the Maximo format message (`irData`).|\n|User Exit (After External Exit)|Used data transaformation from the output of the External Exit to target external format.|\n\n\n\n## Event Filters for Publish Channels\n\nOften we have the need to filter the events such that we want the channel to publish the\nmessage only when a certain state condition is met. This used to get achieved by writing event\nfilter classes in java. With 76 this thing can be scripted. To create a Filter script, use the \"Script For Integration\" -> \"Publish Channel\" -> \"Event Filter\" option in the scripting application. \n\n\n![Event Filter](evenfilter.jpg)\n\n\nBelow is an example of such a filter script on the MXASSETInterface publish channel.\n\n\n```python\nif service.getMbo().isModified(\"status\") and service.getMbo().getString(\"status\")==\"BROKEN\":\n  evalresult = False\nevalresult = True\n```\n\n\nNote that the evalresult being set to False will indicate the event to be published. So effectively\nthis script will filter all events that did not change the status to APPR for the workorder. You\nmight wonder that this could have been done using a channel rule or channel exit class. That is\ndefinitely possible for simplistic rules, although this comes a steep price. The rules get\nevaluated after the event has been serialized and then passed to the exit layer for evaluation.\nBy that time these rules get evaluated you already paid the price of serialization. So why do that\ncostly process when you can skip it before any processing has been done?\n\n\nNote that the event filters apply to event based publish channels. Publish channels that are\nused to export data cannot leverage these filters.\n\n\nAlso note that there is a bug which causes the “mbo” variable to be not accessible directly here.\nYou will have to use the service.getMbo() to get access to the event Mbo here. We will fix this\nbug in the 7609 release of Maximo.\n\n\n## Exits for Publish Channels\n\nAs explained above, there are 3 exit points for publish channel that can be scripted. \nThe purpose is mostly for data transformation, but it is not limited to that. \nOne can conceivably use the exit to make some direct calls to external services and then skip the rest of the Publish channel processing.\nBelow is a table that lists some of the implict variables that the publish channel scripts will have:\n\n\n|Variable|Purpose|\n|:--------------|:---------------------------------------------------------|\n|erData|an instance of psdi.iface.mic.StructureData used to hold the external document. The value of this variable is set to null for External Exits and Before User Exits in the channel.|\n|irData|an instance of psdi.iface.mic.StructureData used to hold the internal (maximo format) document.|\n|ifaceType|The interface type name.|\n|ifaceName|The channel name.|\n|osName|The Object Structure name.|\n|messageType|The message type which can have values like Sync/Publish.|\n|extSystem|The external system name.|\n|userInfo|The UserInfo object representing the authentocated user that invoked this service.|\n|conn|The jdbc Connection object.|\n\n\n\nBelow is a screenshot of the Integration Script Wizard for Publish Channel exits.\n\n\n![Event Filter](pubchannelexit.jpg)\n\n\nWe are going to provide an example script that changes the description of operating assets on outbound transactions.\nIn this scenario, the MXASSET object structure provides `irData` (instance of psdi.iface.mic.StructureData) \nto the MXASSET publish channel (MXASSETINTERFACE) for processing. An automation script is configured to run on the \nexternal exit class of the publish channel. The script checks the status of the asset in the `irData `element. \nIf the asset is in operating status, the script inserts a value in the description field and prints a message to the log file. \nThe erData element is then constructed and is forwarded to the external system. If this is done as an external exit - the name of the script would be PUBLISH.MXASSETINTERFACE.EXTEXIT.OUT.\n\n\n```python\nif irData.getCurrentData(\"STATUS\") == 'OPERATING' :\n  irData.setCurrentData(\"DESCRIPTION\",\"hello\")\n  service.log(\"MYASSET description change\")\n```\n\n\n\n","type":"Mdx","contentDigest":"6551ff3c22a23fe41b6df71c9e23bda1","owner":"gatsby-plugin-mdx","counter":157},"frontmatter":{"title":"Publish Channel Scripting"},"exports":{},"rawBody":"---\ntitle: Publish Channel Scripting\n---\n\nPublish Channels provide the outbound integration backbone of Maximo. They can be\nevent enabled such that when some Mbo’s change their state (ie they get added, updated or\ndeleted) these channels can trap those events and publish a message to the outbound JMS\nqueues. We can also do some offline exports using the channel from the Integration External systems application or from cron jobs invoking the export api of the channel.\nThe messages then get picked up from those queues and get pushed to their final\ndestination (using the endpoint/handler framework). Publish channels support the below script points:\n\n\n|Script Point|Purpose|\n|:--------------|:---------------------------------------------------------|\n|Event Filters|Used for smart filtering of publish channel events|\n|External Exits|Used for data transformation of outbound messages from Maximo format (`irData`) to external format `erData`|\n|User Exit (Before External Exit)|Used data updation without structural change to the Maximo format message (`irData`).|\n|User Exit (After External Exit)|Used data transaformation from the output of the External Exit to target external format.|\n\n\n\n## Event Filters for Publish Channels\n\nOften we have the need to filter the events such that we want the channel to publish the\nmessage only when a certain state condition is met. This used to get achieved by writing event\nfilter classes in java. With 76 this thing can be scripted. To create a Filter script, use the \"Script For Integration\" -> \"Publish Channel\" -> \"Event Filter\" option in the scripting application. \n\n\n![Event Filter](evenfilter.jpg)\n\n\nBelow is an example of such a filter script on the MXASSETInterface publish channel.\n\n\n```python\nif service.getMbo().isModified(\"status\") and service.getMbo().getString(\"status\")==\"BROKEN\":\n  evalresult = False\nevalresult = True\n```\n\n\nNote that the evalresult being set to False will indicate the event to be published. So effectively\nthis script will filter all events that did not change the status to APPR for the workorder. You\nmight wonder that this could have been done using a channel rule or channel exit class. That is\ndefinitely possible for simplistic rules, although this comes a steep price. The rules get\nevaluated after the event has been serialized and then passed to the exit layer for evaluation.\nBy that time these rules get evaluated you already paid the price of serialization. So why do that\ncostly process when you can skip it before any processing has been done?\n\n\nNote that the event filters apply to event based publish channels. Publish channels that are\nused to export data cannot leverage these filters.\n\n\nAlso note that there is a bug which causes the “mbo” variable to be not accessible directly here.\nYou will have to use the service.getMbo() to get access to the event Mbo here. We will fix this\nbug in the 7609 release of Maximo.\n\n\n## Exits for Publish Channels\n\nAs explained above, there are 3 exit points for publish channel that can be scripted. \nThe purpose is mostly for data transformation, but it is not limited to that. \nOne can conceivably use the exit to make some direct calls to external services and then skip the rest of the Publish channel processing.\nBelow is a table that lists some of the implict variables that the publish channel scripts will have:\n\n\n|Variable|Purpose|\n|:--------------|:---------------------------------------------------------|\n|erData|an instance of psdi.iface.mic.StructureData used to hold the external document. The value of this variable is set to null for External Exits and Before User Exits in the channel.|\n|irData|an instance of psdi.iface.mic.StructureData used to hold the internal (maximo format) document.|\n|ifaceType|The interface type name.|\n|ifaceName|The channel name.|\n|osName|The Object Structure name.|\n|messageType|The message type which can have values like Sync/Publish.|\n|extSystem|The external system name.|\n|userInfo|The UserInfo object representing the authentocated user that invoked this service.|\n|conn|The jdbc Connection object.|\n\n\n\nBelow is a screenshot of the Integration Script Wizard for Publish Channel exits.\n\n\n![Event Filter](pubchannelexit.jpg)\n\n\nWe are going to provide an example script that changes the description of operating assets on outbound transactions.\nIn this scenario, the MXASSET object structure provides `irData` (instance of psdi.iface.mic.StructureData) \nto the MXASSET publish channel (MXASSETINTERFACE) for processing. An automation script is configured to run on the \nexternal exit class of the publish channel. The script checks the status of the asset in the `irData `element. \nIf the asset is in operating status, the script inserts a value in the description field and prints a message to the log file. \nThe erData element is then constructed and is forwarded to the external system. If this is done as an external exit - the name of the script would be PUBLISH.MXASSETINTERFACE.EXTEXIT.OUT.\n\n\n```python\nif irData.getCurrentData(\"STATUS\") == 'OPERATING' :\n  irData.setCurrentData(\"DESCRIPTION\",\"hello\")\n  service.log(\"MYASSET description change\")\n```\n\n\n\n","fileAbsolutePath":"/home/sls/git/maximo-app-framework/maximo-autoscript-documentation/src/pages/integration/publishevents.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}