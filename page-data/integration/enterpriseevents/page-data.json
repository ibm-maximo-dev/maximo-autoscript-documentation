{
    "componentChunkName": "component---src-pages-integration-enterpriseevents-mdx",
    "path": "/integration/enterpriseevents/",
    "result": {"pageContext":{"frontmatter":{"title":"Enterprise service script"},"relativePagePath":"/integration/enterpriseevents.mdx","titleType":"append","MdxNode":{"id":"5b84f366-35d7-5767-8bd2-02d7bb48c37b","children":[],"parent":"a69b0107-6929-52b7-af68-171fc733a570","internal":{"content":"---\ntitle: Enterprise service script\n---\n\n\nEnterprise Services provide the inbound integration backbone of Maximo. They represent the internal implementation for all kinds of services that Maximo Integration Framework (MIF) offers, \nXML/HTTP, SOAP, Flat Files, Interface tables to name a few. Enterprise services can optionally leverage the queues as it is async.  \nEnterprise services are also used for Data import from UI as well as cron jobs (File, Interface Tables).\nIf the service is async, the Enterprise service execution starts after the messages get picked up from those queues and\n get pushed downstream. Like its outbound equivalent (Publish Channel), Enterprise Services are used to transform data from external format to Maximo format, json or xml.  \nEnterprise Services support the following script points:\n\n\n|Script Point|Purpose|\n|:--------------|:---------------------------------------------------------|\n|External Exits|Used for data transformation of inbound messages from External format (`erData`) to internal Maximo format `irData`|\n|User Exit (Before External Exit)|Used for data modification before it reaches the External Exit (`erData`).|\n|User Exit (After External Exit)|Used data transformation from the output of the External Exit to target Maximo format.|\n\n\nThe following table lists the available variables:\n\n\n|Variable|Purpose|\n|:--------------|:---------------------------------------------------------|\n|erData|An instance of psdi.iface.mic.StructureData used to hold the external document. Available for all three exits.|\n|irData|An instance of psdi.iface.mic.StructureData used to hold the internal (Maximo format) document. This is set to null (as input) for External Exit and Before User Exit. External exits are expected to set the `irData` by transforming the `erData`.|\n|ifaceType|The interface type name.|\n|ifaceName|The channel name.|\n|osName|The Object Structure name.|\n|messageType|The message type which can have values like Sync/Create/Update/Delete.|\n|extSystem|The external system name.|\n|userInfo|The UserInfo object representing the authenticated user that invoked this service.|\n|conn|The jdbc Connection object.|\n\n\nThe following example is of an after user exit script that sets the wopriority to an inbound WO transaction:\n\n```python\nif irData.getCurrentData(\"vendor\")==\"A0001\" and irData.isCurrentDataNull(\"wopriority\")==True:\n  irData.setCurrentDataAsInt(\"wopriority\",1)\n```  \n\nThe \"After User Exit\" for Enterprise service would work with the `irData` (internal Maximo format data) \nas the inbound External exit would have mapped the external format to an internal format.\nThe following example is of a before user exit. In this example, the script decides to skip the transaction when a certain condition is met.\n\n```python\nfrom org.jdom import Namespace\n\ndoc = erData.getData()\nextXMLRoot = doc.getRootElement()\norgname = extXMLRoot.getChildText(\"orgname\", Namespace.getNamespace(\"http://some_ns.org\"))\nif orgname==\"somevalue\":\n  service.raiseSkipTransaction()\n```\n\nThe Before User Exit has access to only the `erData` variable that contains the external document. \nIn this case the external document is XML and the API to access that as a JDOM document is `erData.getData()`. \nIf this was a json document, you would need to use a different API to get the json data. The following script is an example of that:\n\n\n```python\nfrom com.ibm.tivoli.maximo.oslc import OslcUtils\njsonData = OslcUtils.bytesToJSON(erData.getOriginalByteData())\n\norgname = jsonData.get(\"orgname\")\nif orgname==\"somevalue\":\n  service.raiseSkipTransaction()\n```\n\nThe following example is of an External Exit Script that creates a Maximo company by mapping external data to to MXVENDOR Object Structure:\n\n```python\nfrom psdi.iface.mic import EnterpriseServiceCache\nfrom psdi.server import MXServer\nfrom org.jdom import Namespace\n\ndoc = erData.getData()\nextXMLRoot = doc.getRootElement()\nvendor = extXMLRoot.getChildText(\"vendor\", Namespace.getNamespace(\"http://some_ns.org\"))\norganization = extXMLRoot.getChildText(\"organization\", Namespace.getNamespace(\"http://some_ns.org\"))\nsrv = EnterpriseServiceCache.getInstance().getEnterpriseServiceInfo(\"MXVENDORInterface\")\nchangeBy = extXMLRoot.getChildText(\"user\", Namespace.getNamespace(\"http://some_ns.org\"))\nirData = StructureData(srv.getMessageType(), srv.getMosName(), userInfo.getLangCode(), 1, false, false)\nirData.setCurrentData(\"COMPANY\", vendor)\nirData.setCurrentData(\"ORGID\", organization)\nirData.setCurrentData(\"CHANGEBY\", changeBy)\nirData.setCurrentData(\"CHANGEDATE\", MXServer.getMXServer().getDate())\n```\n\n  \n\n\n\n","type":"Mdx","contentDigest":"f8753364d09660862ec061a6e918b7c3","owner":"gatsby-plugin-mdx","counter":192},"frontmatter":{"title":"Enterprise service script"},"exports":{},"rawBody":"---\ntitle: Enterprise service script\n---\n\n\nEnterprise Services provide the inbound integration backbone of Maximo. They represent the internal implementation for all kinds of services that Maximo Integration Framework (MIF) offers, \nXML/HTTP, SOAP, Flat Files, Interface tables to name a few. Enterprise services can optionally leverage the queues as it is async.  \nEnterprise services are also used for Data import from UI as well as cron jobs (File, Interface Tables).\nIf the service is async, the Enterprise service execution starts after the messages get picked up from those queues and\n get pushed downstream. Like its outbound equivalent (Publish Channel), Enterprise Services are used to transform data from external format to Maximo format, json or xml.  \nEnterprise Services support the following script points:\n\n\n|Script Point|Purpose|\n|:--------------|:---------------------------------------------------------|\n|External Exits|Used for data transformation of inbound messages from External format (`erData`) to internal Maximo format `irData`|\n|User Exit (Before External Exit)|Used for data modification before it reaches the External Exit (`erData`).|\n|User Exit (After External Exit)|Used data transformation from the output of the External Exit to target Maximo format.|\n\n\nThe following table lists the available variables:\n\n\n|Variable|Purpose|\n|:--------------|:---------------------------------------------------------|\n|erData|An instance of psdi.iface.mic.StructureData used to hold the external document. Available for all three exits.|\n|irData|An instance of psdi.iface.mic.StructureData used to hold the internal (Maximo format) document. This is set to null (as input) for External Exit and Before User Exit. External exits are expected to set the `irData` by transforming the `erData`.|\n|ifaceType|The interface type name.|\n|ifaceName|The channel name.|\n|osName|The Object Structure name.|\n|messageType|The message type which can have values like Sync/Create/Update/Delete.|\n|extSystem|The external system name.|\n|userInfo|The UserInfo object representing the authenticated user that invoked this service.|\n|conn|The jdbc Connection object.|\n\n\nThe following example is of an after user exit script that sets the wopriority to an inbound WO transaction:\n\n```python\nif irData.getCurrentData(\"vendor\")==\"A0001\" and irData.isCurrentDataNull(\"wopriority\")==True:\n  irData.setCurrentDataAsInt(\"wopriority\",1)\n```  \n\nThe \"After User Exit\" for Enterprise service would work with the `irData` (internal Maximo format data) \nas the inbound External exit would have mapped the external format to an internal format.\nThe following example is of a before user exit. In this example, the script decides to skip the transaction when a certain condition is met.\n\n```python\nfrom org.jdom import Namespace\n\ndoc = erData.getData()\nextXMLRoot = doc.getRootElement()\norgname = extXMLRoot.getChildText(\"orgname\", Namespace.getNamespace(\"http://some_ns.org\"))\nif orgname==\"somevalue\":\n  service.raiseSkipTransaction()\n```\n\nThe Before User Exit has access to only the `erData` variable that contains the external document. \nIn this case the external document is XML and the API to access that as a JDOM document is `erData.getData()`. \nIf this was a json document, you would need to use a different API to get the json data. The following script is an example of that:\n\n\n```python\nfrom com.ibm.tivoli.maximo.oslc import OslcUtils\njsonData = OslcUtils.bytesToJSON(erData.getOriginalByteData())\n\norgname = jsonData.get(\"orgname\")\nif orgname==\"somevalue\":\n  service.raiseSkipTransaction()\n```\n\nThe following example is of an External Exit Script that creates a Maximo company by mapping external data to to MXVENDOR Object Structure:\n\n```python\nfrom psdi.iface.mic import EnterpriseServiceCache\nfrom psdi.server import MXServer\nfrom org.jdom import Namespace\n\ndoc = erData.getData()\nextXMLRoot = doc.getRootElement()\nvendor = extXMLRoot.getChildText(\"vendor\", Namespace.getNamespace(\"http://some_ns.org\"))\norganization = extXMLRoot.getChildText(\"organization\", Namespace.getNamespace(\"http://some_ns.org\"))\nsrv = EnterpriseServiceCache.getInstance().getEnterpriseServiceInfo(\"MXVENDORInterface\")\nchangeBy = extXMLRoot.getChildText(\"user\", Namespace.getNamespace(\"http://some_ns.org\"))\nirData = StructureData(srv.getMessageType(), srv.getMosName(), userInfo.getLangCode(), 1, false, false)\nirData.setCurrentData(\"COMPANY\", vendor)\nirData.setCurrentData(\"ORGID\", organization)\nirData.setCurrentData(\"CHANGEBY\", changeBy)\nirData.setCurrentData(\"CHANGEDATE\", MXServer.getMXServer().getDate())\n```\n\n  \n\n\n\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/integration/enterpriseevents.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}