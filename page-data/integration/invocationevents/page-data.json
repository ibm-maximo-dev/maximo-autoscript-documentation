{
    "componentChunkName": "component---src-pages-integration-invocationevents-mdx",
    "path": "/integration/invocationevents/",
    "result": {"pageContext":{"frontmatter":{"title":"Invoke Channel Scripting"},"relativePagePath":"/integration/invocationevents.mdx","titleType":"append","MdxNode":{"id":"5298f982-95eb-5133-8131-3f902ce42daf","children":[],"parent":"5d09d8a4-d633-540a-8199-da8d429b7026","internal":{"content":"---\ntitle: Invoke Channel Scripting\n---\n\nLike Publish channels, Invoke channels are used for outbound invocation from Maximo. \nThe only difference being, publish channel is one way (request only) and Invoke Channel is 2 way (request response).\nSince there is a request and response, there will be 2 sets of exits - one set of exits for request and one set for response.\nThe below screen shot shows the wizard:\n\n\n![Invoke Channel Exits](invokechannelexit.jpg)  \n\n\nBelow is a table that lists the script points for Invoke Channel:\n\n\n|Script Point|Purpose\n|:--------------|:---------------------------------------------------------------------------|\n|Oubound External Exit|This is for prepping the outbound call. This can be used to prepare the request data or the request url (as shown in below example)|\n|Outbound Before User Exit|Similar to the outbound external exit - can be used for preparing the data or the request endpoint data. Use this if there is already an external exit and you want to customize some data before it hits that exit.|\n|Outbound After User Exit|Similar to the outbound external exit - can be used for preparing the data or the request endpoint data.|\n|Inbound External Exit|This is for handling the response of the invocation - if there is a response. Like any inbound external exit, this should be used to map the response data to maximo internal format|\n|Inbound Before User Exit|Similar to the inbound external exit - can be used for mapping the inbound data.|\n|Inbound After User Exit|Similar to the inbound external exit - can be used for mapping the inbound data.|\n\n\nAll the outbound script points have the same variables as defined in publish channel scripting. \nAll inbound script points have the same variables as defined in the Enterprise service scripting document.\nThe use case here is to set the city and state in the Organiztion application->Address tab when\nthe user enters the zip code. Assume we have an external rest api that looks like below:\n\n\nGET {zip to city uri}?zips={zip code}\n\n\nAnd the response is a json that returns the city and state for the {zip code}. We want to invoke\nthat api when the user enters the zip code and then tabs out (of attribute Address4). To do this,\nwe would need to create an Object Structure for the Address mbo - say named MXADDRESS.\nWe are then going to set-up an invoke channel with an HTTP endpoint that has the url set to the\n{zip to city uri}. We are going to set the zips query parameter dynamically in the exit scripts.\nMake sure that you set the \"process response\" check box and set the request and response\nObject Structure to MXADDRESS.\n\n\nWe will then create the external exit scripts for both the request and response handling. We will\nuse the Create Scripts for Integration menu option from the Autoscript application to create the\nrequest and response exits for Invoke Channel. For both cases, we are going to choose the\n\"External Exit\" option. The request (INVOKE.ZIPCHANNEL.EXTEXIT.OUT) exit (in py) will look\nlike below:\n\n\n```python\nfrom java.util import HashMap\nfrom psdi.iface.router import HTTPHandler\nfrom psdi.iface.mic import IntegrationContext\nfrom psdi.iface.mic import MetaDataProperties\nepProps = HashMap()\nurlProps = HashMap()\nzip = irData.getCurrentData(\"ADDRESS4\");\nurlProps.put(\"zips\",zip)\nepProps.put(HTTPHandler.HTTPGET_URLPROPS,urlProps)\nIntegrationContext.getCurrentContext().setProperty(MetaDataProperties.ENDPOINTPROPS, epProps)\n```\n\nThe response (INVOKE.ZIPCHANNEL.EXTEXIT.IN) exit (in js) will look like below\n\n\n```js\nvar resp = JSON.parse(erData.getDataAsString());\nvar irData = new StructureData(messageType, osName, userInfo.getLangCode(), 1, false, true);\nirData.setCurrentData(\"ADDRESS3\", resp.zips[0].state);\nirData.setCurrentData(\"ADDRESS2\", resp.zips[0].city);\n```\n\n\nNote the response json is assumed to be like this (based on a sample popular rest service out there):\n\n\n```\n{\n  \"zips\":[\n      {\n        \"state\":\"Blah\",\n        \"city\":\"Blah1\"\n        ….\n      }\n  ]\n}\n```\n\nThis script could have been optimized a little bit more for the use case given. For example we\ncould have directly set the json data to the Mbo - something that we can do only in case of\nInvoke Channels.\n\n\n```js\nIntegrationContext = Java.type(\"psdi.iface.mic.IntegrationContext\");\nvar resp = JSON.parse(erData.getDataAsString());\nvar mbo = IntegrationContext.getCurrentContext().getProperty(\"targetobject\");\nmbo.setValue(\"address3\",resp.zips[0].state);\nmbo.setValue(\"address2\",resp.zips[0].city);\nservice.raiseSkipTransaction();\n```\n\n\nNote here how we got the “mbo”. We got it from the IntegrationContext \"targetobject\" property,\nwhich stores the reference of the Mbo to which we are going to set the json response to. Setting\nthe response can be done by MIF using the irData - as we have shown in our previous\nexample. In this example we show how you can do it without needing to create the irData. We use the resp json object to get the state and city and set it directly to the “mbo”. Then we can\njust skip the rest of MIF processing by asking the service object to skip the transaction. We can\nuse this in other forms of inbound exits - like the user exit and the external exit for Enterprise\nservices. Make sure that you set the data yourself to the mbos that you want and the skip the\nrest of MIF processing. Also please note that this IntegrationContext \"targetobject\" property is\nonly available for exits in InvokeChannel.\n\n\nNext we will write an Attribute LaunchPoint script (action event) for the Address4 attribute (zip code attribute in\nAddress object) to invoke this channel when the zip code value is set.\n\n\n```\nservice.invokeChannel(\"zipchannel\")\n```\n\nAs you can see, we use the service variable to do this call. This will call the channel, which in\nturn goes through the request and response exits.\n\n\n\n\n\n\n\n\n\n","type":"Mdx","contentDigest":"5de796ae92d7712f06d3ebc8b4ebb013","owner":"gatsby-plugin-mdx","counter":156},"frontmatter":{"title":"Invoke Channel Scripting"},"exports":{},"rawBody":"---\ntitle: Invoke Channel Scripting\n---\n\nLike Publish channels, Invoke channels are used for outbound invocation from Maximo. \nThe only difference being, publish channel is one way (request only) and Invoke Channel is 2 way (request response).\nSince there is a request and response, there will be 2 sets of exits - one set of exits for request and one set for response.\nThe below screen shot shows the wizard:\n\n\n![Invoke Channel Exits](invokechannelexit.jpg)  \n\n\nBelow is a table that lists the script points for Invoke Channel:\n\n\n|Script Point|Purpose\n|:--------------|:---------------------------------------------------------------------------|\n|Oubound External Exit|This is for prepping the outbound call. This can be used to prepare the request data or the request url (as shown in below example)|\n|Outbound Before User Exit|Similar to the outbound external exit - can be used for preparing the data or the request endpoint data. Use this if there is already an external exit and you want to customize some data before it hits that exit.|\n|Outbound After User Exit|Similar to the outbound external exit - can be used for preparing the data or the request endpoint data.|\n|Inbound External Exit|This is for handling the response of the invocation - if there is a response. Like any inbound external exit, this should be used to map the response data to maximo internal format|\n|Inbound Before User Exit|Similar to the inbound external exit - can be used for mapping the inbound data.|\n|Inbound After User Exit|Similar to the inbound external exit - can be used for mapping the inbound data.|\n\n\nAll the outbound script points have the same variables as defined in publish channel scripting. \nAll inbound script points have the same variables as defined in the Enterprise service scripting document.\nThe use case here is to set the city and state in the Organiztion application->Address tab when\nthe user enters the zip code. Assume we have an external rest api that looks like below:\n\n\nGET {zip to city uri}?zips={zip code}\n\n\nAnd the response is a json that returns the city and state for the {zip code}. We want to invoke\nthat api when the user enters the zip code and then tabs out (of attribute Address4). To do this,\nwe would need to create an Object Structure for the Address mbo - say named MXADDRESS.\nWe are then going to set-up an invoke channel with an HTTP endpoint that has the url set to the\n{zip to city uri}. We are going to set the zips query parameter dynamically in the exit scripts.\nMake sure that you set the \"process response\" check box and set the request and response\nObject Structure to MXADDRESS.\n\n\nWe will then create the external exit scripts for both the request and response handling. We will\nuse the Create Scripts for Integration menu option from the Autoscript application to create the\nrequest and response exits for Invoke Channel. For both cases, we are going to choose the\n\"External Exit\" option. The request (INVOKE.ZIPCHANNEL.EXTEXIT.OUT) exit (in py) will look\nlike below:\n\n\n```python\nfrom java.util import HashMap\nfrom psdi.iface.router import HTTPHandler\nfrom psdi.iface.mic import IntegrationContext\nfrom psdi.iface.mic import MetaDataProperties\nepProps = HashMap()\nurlProps = HashMap()\nzip = irData.getCurrentData(\"ADDRESS4\");\nurlProps.put(\"zips\",zip)\nepProps.put(HTTPHandler.HTTPGET_URLPROPS,urlProps)\nIntegrationContext.getCurrentContext().setProperty(MetaDataProperties.ENDPOINTPROPS, epProps)\n```\n\nThe response (INVOKE.ZIPCHANNEL.EXTEXIT.IN) exit (in js) will look like below\n\n\n```js\nvar resp = JSON.parse(erData.getDataAsString());\nvar irData = new StructureData(messageType, osName, userInfo.getLangCode(), 1, false, true);\nirData.setCurrentData(\"ADDRESS3\", resp.zips[0].state);\nirData.setCurrentData(\"ADDRESS2\", resp.zips[0].city);\n```\n\n\nNote the response json is assumed to be like this (based on a sample popular rest service out there):\n\n\n```\n{\n  \"zips\":[\n      {\n        \"state\":\"Blah\",\n        \"city\":\"Blah1\"\n        ….\n      }\n  ]\n}\n```\n\nThis script could have been optimized a little bit more for the use case given. For example we\ncould have directly set the json data to the Mbo - something that we can do only in case of\nInvoke Channels.\n\n\n```js\nIntegrationContext = Java.type(\"psdi.iface.mic.IntegrationContext\");\nvar resp = JSON.parse(erData.getDataAsString());\nvar mbo = IntegrationContext.getCurrentContext().getProperty(\"targetobject\");\nmbo.setValue(\"address3\",resp.zips[0].state);\nmbo.setValue(\"address2\",resp.zips[0].city);\nservice.raiseSkipTransaction();\n```\n\n\nNote here how we got the “mbo”. We got it from the IntegrationContext \"targetobject\" property,\nwhich stores the reference of the Mbo to which we are going to set the json response to. Setting\nthe response can be done by MIF using the irData - as we have shown in our previous\nexample. In this example we show how you can do it without needing to create the irData. We use the resp json object to get the state and city and set it directly to the “mbo”. Then we can\njust skip the rest of MIF processing by asking the service object to skip the transaction. We can\nuse this in other forms of inbound exits - like the user exit and the external exit for Enterprise\nservices. Make sure that you set the data yourself to the mbos that you want and the skip the\nrest of MIF processing. Also please note that this IntegrationContext \"targetobject\" property is\nonly available for exits in InvokeChannel.\n\n\nNext we will write an Attribute LaunchPoint script (action event) for the Address4 attribute (zip code attribute in\nAddress object) to invoke this channel when the zip code value is set.\n\n\n```\nservice.invokeChannel(\"zipchannel\")\n```\n\nAs you can see, we use the service variable to do this call. This will call the channel, which in\nturn goes through the request and response exits.\n\n\n\n\n\n\n\n\n\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/integration/invocationevents.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}