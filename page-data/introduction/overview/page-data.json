{
    "componentChunkName": "component---src-pages-introduction-overview-mdx",
    "path": "/introduction/overview/",
    "result": {"pageContext":{"frontmatter":{"title":"Overview","description":"Scripting languages supported in Maximo"},"relativePagePath":"/introduction/overview.mdx","titleType":"append","MdxNode":{"id":"70449d23-d12d-5fb0-ba41-c727a2fa558f","children":[],"parent":"0929197d-96e2-5e6b-b1d1-198022dfd4af","internal":{"content":"---\ntitle: Overview\ndescription: Scripting languages supported in Maximo\n---\n\n## Overview\n\nScripting is a new feature that was introduced in Maximo version 7.5 based on the feedback from the user community who yearned to have a simpler yet\neffective way of customizing the product without having to go through the pain of system downtime and steep learning curve.\n\nWhile Maximo provides great many customization points, most of them needs JAVA coding skills to do any meaningful [logic based] customization. It also\nwould often need deep knowledge of Maximo apis as well as the Maximo internals. That can often be a daunting task even for an experienced\nprogrammer.\n\nMaximo scripting helps ease some of these concerns. Maximo scripting is primarily based on the JSR 223 specification which is part of JAVA 6.\nThis JSR allows a JAVA application [in this case Maximo] to host script engines which are compliant to this specification. The engines that are supported in an\nOOTB Maximo are\n\n* 1. Nashorn (JavaScript) which ships with the IBM/Oracle JDK\n* 2. Jython (2.7.2) which is included as part of Maximo\n\n\nThis implies that users can use either of these 2 scripting languages to customize Maximo using the Maximo scripting framework. We do understand\nthat there are other popular JSR 223 compliant scripting engines like JRuby/Groovy and it should be fairly simple to add support for these by adding\nthese engines [jars] in Maximo application classpath. The way the scripting framework is written – it should be able to detect those jars from the classpath\nand show them as available languages in the scripting application. However I would like to mention that at this point Maximo has only been tested with the\nRhino-JavaScript and Jython engines and JSR 223 being fairly new, a lot of the \"compliant\" engines may have potential issues with their implementation which\ncan prevent seamless integration with Maximo.\n","type":"Mdx","contentDigest":"704d502e974d757496023c61d37bfaba","owner":"gatsby-plugin-mdx","counter":162},"frontmatter":{"title":"Overview","description":"Scripting languages supported in Maximo"},"exports":{},"rawBody":"---\ntitle: Overview\ndescription: Scripting languages supported in Maximo\n---\n\n## Overview\n\nScripting is a new feature that was introduced in Maximo version 7.5 based on the feedback from the user community who yearned to have a simpler yet\neffective way of customizing the product without having to go through the pain of system downtime and steep learning curve.\n\nWhile Maximo provides great many customization points, most of them needs JAVA coding skills to do any meaningful [logic based] customization. It also\nwould often need deep knowledge of Maximo apis as well as the Maximo internals. That can often be a daunting task even for an experienced\nprogrammer.\n\nMaximo scripting helps ease some of these concerns. Maximo scripting is primarily based on the JSR 223 specification which is part of JAVA 6.\nThis JSR allows a JAVA application [in this case Maximo] to host script engines which are compliant to this specification. The engines that are supported in an\nOOTB Maximo are\n\n* 1. Nashorn (JavaScript) which ships with the IBM/Oracle JDK\n* 2. Jython (2.7.2) which is included as part of Maximo\n\n\nThis implies that users can use either of these 2 scripting languages to customize Maximo using the Maximo scripting framework. We do understand\nthat there are other popular JSR 223 compliant scripting engines like JRuby/Groovy and it should be fairly simple to add support for these by adding\nthese engines [jars] in Maximo application classpath. The way the scripting framework is written – it should be able to detect those jars from the classpath\nand show them as available languages in the scripting application. However I would like to mention that at this point Maximo has only been tested with the\nRhino-JavaScript and Jython engines and JSR 223 being fairly new, a lot of the \"compliant\" engines may have potential issues with their implementation which\ncan prevent seamless integration with Maximo.\n","fileAbsolutePath":"/home/sls/git/maximo-app-framework/maximo-autoscript-documentation/src/pages/introduction/overview.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}