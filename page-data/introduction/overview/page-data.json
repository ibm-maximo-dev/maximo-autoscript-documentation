{
    "componentChunkName": "component---src-pages-introduction-overview-mdx",
    "path": "/introduction/overview/",
    "result": {"pageContext":{"frontmatter":{"title":"Overview","description":"Scripting languages supported in Maximo"},"relativePagePath":"/introduction/overview.mdx","titleType":"append","MdxNode":{"id":"d77ce29f-1fc5-5cf5-a418-4f93cf8998d3","children":[],"parent":"50660dd0-c939-521a-91fa-33731a035b33","internal":{"content":"---\ntitle: Overview\ndescription: Scripting languages supported in Maximo\n---\n\n## Overview\n\nScripting was introduced in Maximo 7.5 as a simple yet effective way to customize the product without going through system downtime and a steep learning curve.\n\nWhile Maximo provides multiple customization points, most of them require Java coding skills to do any meaningful, logic-based customization and requires deep knowledge of Maximo APIs as well as  Maximo components. This customization can be a difficult task even for an experienced\nprogrammer.\n\nMaximo scripting helps ease some of these concerns. Maximo scripting is primarily based on the Java Specification Request (JSR) 223 specification framework, which is part of Java 6. This JSR allows Maximo to host script engines that are compliant with this specification. The following script engines are supported in Maximo:\n\n- Nashorn (JavaScript) which ships with the IBM/Oracle JDK\n- Jython (2.7.2) which is included as part of Maximo\n\n\nYou can use either of these scripting languages to customize Maximo using the Maximo scripting framework. \n\nMaximo can also support other JSR 223 compliant scripting engines, or jars, like JRuby or Groovy. You can add them to the Maximo application classpath. The scripting framework detects the jars from the classpath and displays them as available languages in the scripting application. However, Maximo has only been tested with the Nashorn-JavaScript and Jython engines so you might experience issues when you implement different engines.\n\nIn addition to the JSR 223 compliant engines, the scripting framework can be extended to support other custom engines, as shown in the following diagram.\n\nThe diagram shows that Maximo supports the Maximo Business Rules (MBR) script driver to execute MBR scripts. This driver was written to handle a custom scripting language and was created just for Maximo, which shows the extensibility of the framework.\n","type":"Mdx","contentDigest":"58602e5cb52c086f0e92e1e6fc4fc602","owner":"gatsby-plugin-mdx","counter":202},"frontmatter":{"title":"Overview","description":"Scripting languages supported in Maximo"},"exports":{},"rawBody":"---\ntitle: Overview\ndescription: Scripting languages supported in Maximo\n---\n\n## Overview\n\nScripting was introduced in Maximo 7.5 as a simple yet effective way to customize the product without going through system downtime and a steep learning curve.\n\nWhile Maximo provides multiple customization points, most of them require Java coding skills to do any meaningful, logic-based customization and requires deep knowledge of Maximo APIs as well as  Maximo components. This customization can be a difficult task even for an experienced\nprogrammer.\n\nMaximo scripting helps ease some of these concerns. Maximo scripting is primarily based on the Java Specification Request (JSR) 223 specification framework, which is part of Java 6. This JSR allows Maximo to host script engines that are compliant with this specification. The following script engines are supported in Maximo:\n\n- Nashorn (JavaScript) which ships with the IBM/Oracle JDK\n- Jython (2.7.2) which is included as part of Maximo\n\n\nYou can use either of these scripting languages to customize Maximo using the Maximo scripting framework. \n\nMaximo can also support other JSR 223 compliant scripting engines, or jars, like JRuby or Groovy. You can add them to the Maximo application classpath. The scripting framework detects the jars from the classpath and displays them as available languages in the scripting application. However, Maximo has only been tested with the Nashorn-JavaScript and Jython engines so you might experience issues when you implement different engines.\n\nIn addition to the JSR 223 compliant engines, the scripting framework can be extended to support other custom engines, as shown in the following diagram.\n\nThe diagram shows that Maximo supports the Maximo Business Rules (MBR) script driver to execute MBR scripts. This driver was written to handle a custom scripting language and was created just for Maximo, which shows the extensibility of the framework.\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/introduction/overview.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}