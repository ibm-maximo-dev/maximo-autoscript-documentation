{
    "componentChunkName": "component---src-pages-introduction-whatisautoscript-mdx",
    "path": "/introduction/whatisautoscript/",
    "result": {"pageContext":{"frontmatter":{"title":"What is an Automation Script"},"relativePagePath":"/introduction/whatisautoscript.mdx","titleType":"append","MdxNode":{"id":"4cd87402-556f-58c8-bc6e-b3f57d98656d","children":[],"parent":"821b45ee-69dc-5c1d-bfd8-7b779c1fd779","internal":{"content":"---\ntitle: What is an Automation Script\n---\n\n## Overview\n\nAn automation script is a piece of code that is interpreted and executed by the Maximo Manage scripting framework (at runtime) when a target event happens. The script framework can tap into various forms of events - attribute modifications, object modifications or just callbacks. These events and callbacks help script developers target the right extension points for their custom feature. The code and the associated configuration are stored in Manage database and the compiled scripts are cached at runtime. \n\nGetting into more specifics about the script itself - a script is a text file that you can edit inside Maximo or outside of Maximo [in your choice of editors and import back into Maximo]. Every script has an associated attribute – scriptlanguage which helps the run-time figure out the appropriate script engine to invoke for processing the script. The value list for available script languages come from the providing script engines in the classpath. Its common for script engines to provide multiple alias or short names for the language support provided by that engine. For example the jython engine provides 2 names – jython and python – both referring to the same engine/script language. Selecting either one is fine and produces identical behavior. Most engines support script compilation which eventually converts the script to a executable bytecode [for the JVM]. The ones that we support OOTB – JavaScript and Jython both support complied scripts. When the deployer is commiting the design process – in the background the framework would compile and cache the script. This process is often referred to as generating \"hot\" scripts which are ready to execute. Note if there is a compile failure the process will not commit and the deployer has to fix the script to proceed.","type":"Mdx","contentDigest":"cac3e4b8446f2928ca7add42d4572569","owner":"gatsby-plugin-mdx","counter":163},"frontmatter":{"title":"What is an Automation Script"},"exports":{},"rawBody":"---\ntitle: What is an Automation Script\n---\n\n## Overview\n\nAn automation script is a piece of code that is interpreted and executed by the Maximo Manage scripting framework (at runtime) when a target event happens. The script framework can tap into various forms of events - attribute modifications, object modifications or just callbacks. These events and callbacks help script developers target the right extension points for their custom feature. The code and the associated configuration are stored in Manage database and the compiled scripts are cached at runtime. \n\nGetting into more specifics about the script itself - a script is a text file that you can edit inside Maximo or outside of Maximo [in your choice of editors and import back into Maximo]. Every script has an associated attribute – scriptlanguage which helps the run-time figure out the appropriate script engine to invoke for processing the script. The value list for available script languages come from the providing script engines in the classpath. Its common for script engines to provide multiple alias or short names for the language support provided by that engine. For example the jython engine provides 2 names – jython and python – both referring to the same engine/script language. Selecting either one is fine and produces identical behavior. Most engines support script compilation which eventually converts the script to a executable bytecode [for the JVM]. The ones that we support OOTB – JavaScript and Jython both support complied scripts. When the deployer is commiting the design process – in the background the framework would compile and cache the script. This process is often referred to as generating \"hot\" scripts which are ready to execute. Note if there is a compile failure the process will not commit and the deployer has to fix the script to proceed.","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/introduction/whatisautoscript.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}