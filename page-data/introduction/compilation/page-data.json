{
    "componentChunkName": "component---src-pages-introduction-compilation-mdx",
    "path": "/introduction/compilation/",
    "result": {"pageContext":{"frontmatter":{"title":"Script Compilation And Caching"},"relativePagePath":"/introduction/compilation.mdx","titleType":"append","MdxNode":{"id":"46b27ed4-e121-5382-a587-be1d4a3a5785","children":[],"parent":"963a525b-a909-5732-9741-22f61ff01b30","internal":{"content":"---\ntitle: Script Compilation And Caching\n---\n\nScript code is written into the source code field of the Automation Script application. Alternately, script code can be imported as the Automation Script wizards are used to create new launch point and script. Once the Automation Script wizard steps are completed or, the Save Script button of the Automation Scripts application is clicked the contents of the field are compiled, cached into memory and, finally, saved to the Maximo database.\n\n\n## Script compilation\nAt run time, when a script is to be executed, an entity called the interpreter (JSR223 Driver) is given the script code. The interpreter loads, evaluates and then executes the script code. If this sequence of tasks is performed every time a script is to be executed, script execution will be very inefficient and business application responsiveness adversely impacted. Instead of adopting this approach, Maximo scripting framework compiles and caches the script. Script compilation results in the script being read, evaluated and compiled into intermediate byte code just once. Once this intermediate byte code is cached, significant time savings result as script execution no longer needs to load and evaluate the script code.\n\n\n## Intermediate byte code\nThe ability to compile a script depends upon support available in the underlying scripting engine. Maximo ships with the Nashorn js and Jython scripting engines both of which support the compilation of a script into Java byte code. Other scripting engines may not offer the same support.\n\n\n## Script cache\nMaximo implements a script cache that loads the Java byte code representation of a script into memory. This cache enables script execution to be more efficient. The script cache is refreshed under these conditions:\n\n\n* 1. New launch point and script created using Automation Scripts application wizards\n* 2. Existing script modified and saved from Automation Scripts application\n* 3. Application server start up of Maximo\n\n \nThe script cache adheres to Maximo’s standard caching mechanism and thus, script changes are automatically propagated to all Java Virtual Machine (JVM) instances in a clustered environment.\n\n\n## Script execution\nAt run time, script execution is triggered by Maximo’s scripting framework using the appropriate script language interpreter. If an error is encountered, statements and traces pertaining to the error are written to the application server console and/or the product log file, if the latter has been configured. Script execution stops upon encountering the first error.\nMaximo will always output the script execution time in milliseconds to the application server console and/or the product log file.","type":"Mdx","contentDigest":"048f4f60802f9ed0a5e351cb44745713","owner":"gatsby-plugin-mdx","counter":159},"frontmatter":{"title":"Script Compilation And Caching"},"exports":{},"rawBody":"---\ntitle: Script Compilation And Caching\n---\n\nScript code is written into the source code field of the Automation Script application. Alternately, script code can be imported as the Automation Script wizards are used to create new launch point and script. Once the Automation Script wizard steps are completed or, the Save Script button of the Automation Scripts application is clicked the contents of the field are compiled, cached into memory and, finally, saved to the Maximo database.\n\n\n## Script compilation\nAt run time, when a script is to be executed, an entity called the interpreter (JSR223 Driver) is given the script code. The interpreter loads, evaluates and then executes the script code. If this sequence of tasks is performed every time a script is to be executed, script execution will be very inefficient and business application responsiveness adversely impacted. Instead of adopting this approach, Maximo scripting framework compiles and caches the script. Script compilation results in the script being read, evaluated and compiled into intermediate byte code just once. Once this intermediate byte code is cached, significant time savings result as script execution no longer needs to load and evaluate the script code.\n\n\n## Intermediate byte code\nThe ability to compile a script depends upon support available in the underlying scripting engine. Maximo ships with the Nashorn js and Jython scripting engines both of which support the compilation of a script into Java byte code. Other scripting engines may not offer the same support.\n\n\n## Script cache\nMaximo implements a script cache that loads the Java byte code representation of a script into memory. This cache enables script execution to be more efficient. The script cache is refreshed under these conditions:\n\n\n* 1. New launch point and script created using Automation Scripts application wizards\n* 2. Existing script modified and saved from Automation Scripts application\n* 3. Application server start up of Maximo\n\n \nThe script cache adheres to Maximo’s standard caching mechanism and thus, script changes are automatically propagated to all Java Virtual Machine (JVM) instances in a clustered environment.\n\n\n## Script execution\nAt run time, script execution is triggered by Maximo’s scripting framework using the appropriate script language interpreter. If an error is encountered, statements and traces pertaining to the error are written to the application server console and/or the product log file, if the latter has been configured. Script execution stops upon encountering the first error.\nMaximo will always output the script execution time in milliseconds to the application server console and/or the product log file.","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/introduction/compilation.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}