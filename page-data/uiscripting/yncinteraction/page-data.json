{
    "componentChunkName": "component---src-pages-uiscripting-yncinteraction-mdx",
    "path": "/uiscripting/yncinteraction/",
    "result": {"pageContext":{"frontmatter":{"title":"YNC Interactions Using Scripting"},"relativePagePath":"/uiscripting/yncinteraction.mdx","titleType":"append","MdxNode":{"id":"6e0ec71f-5d42-50c7-8f8f-941e11b8b694","children":[],"parent":"3c203593-de6f-50de-a0ff-2d838bba77b4","internal":{"content":"---\ntitle: YNC Interactions Using Scripting\n---\n\n## YNC Interactions Using Scripting\n\nYNC (aka **Y**es, **N**o, **C**ancel) interactions can now be designed using automation scripts. We\nneed to do some prep work before writing the script. First we need to define a message that\nsupport the YNC interaction. This is similar to what we have done in defining the warning\nmessage group and key before. Make sure you have the message as informational (I) and\nsupport the yes and no buttons.\n\n\nThe use case below launches a yes/no dialog when the priority is set to 1. It asks the user if the\nhe/she wants to set a default vendor for this. If the user select \"yes\" the script will set the default\nvendor A0001 and will mark the vendor field as required. If the user selects \"no\" vendor is\nmarked as not required.\n\n\nThe script shown below associates the var v with vendor and is added as an Attribute Launch\npoint script with \"action\" event. \"assetpr\" has been defined in the \"asset\" group as an\ninformational message with buttons Y and N enabled.\n\n\n```python\ndef yes():\n  global v,v_required\n  v = \"A0001\"\n  v_required = True\n\ndef no():\n  global v,v_required\n  v_required = False;\n\ndef dflt():\n  service.log(\"dflt\")\n  params = [str(priority)]\n  service.yncerror(\"asset\", \"assetpr\",params)\n  \n  \ncases = {service.YNC_NULL:dflt,service.YNC_YES:yes,service.YNC_NO:no}\nif interactive:\n  if priority==1:\n    x = service.yncuserinput()\n    cases[x]()\n\n```\n","type":"Mdx","contentDigest":"04bbeccd37d148eeee25361fe7ad54e4","owner":"gatsby-plugin-mdx","counter":179},"frontmatter":{"title":"YNC Interactions Using Scripting"},"exports":{},"rawBody":"---\ntitle: YNC Interactions Using Scripting\n---\n\n## YNC Interactions Using Scripting\n\nYNC (aka **Y**es, **N**o, **C**ancel) interactions can now be designed using automation scripts. We\nneed to do some prep work before writing the script. First we need to define a message that\nsupport the YNC interaction. This is similar to what we have done in defining the warning\nmessage group and key before. Make sure you have the message as informational (I) and\nsupport the yes and no buttons.\n\n\nThe use case below launches a yes/no dialog when the priority is set to 1. It asks the user if the\nhe/she wants to set a default vendor for this. If the user select \"yes\" the script will set the default\nvendor A0001 and will mark the vendor field as required. If the user selects \"no\" vendor is\nmarked as not required.\n\n\nThe script shown below associates the var v with vendor and is added as an Attribute Launch\npoint script with \"action\" event. \"assetpr\" has been defined in the \"asset\" group as an\ninformational message with buttons Y and N enabled.\n\n\n```python\ndef yes():\n  global v,v_required\n  v = \"A0001\"\n  v_required = True\n\ndef no():\n  global v,v_required\n  v_required = False;\n\ndef dflt():\n  service.log(\"dflt\")\n  params = [str(priority)]\n  service.yncerror(\"asset\", \"assetpr\",params)\n  \n  \ncases = {service.YNC_NULL:dflt,service.YNC_YES:yes,service.YNC_NO:no}\nif interactive:\n  if priority==1:\n    x = service.yncuserinput()\n    cases[x]()\n\n```\n","fileAbsolutePath":"/home/sls/git/maximo-app-framework/maximo-autoscript-documentation/src/pages/uiscripting/yncinteraction.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}