{
    "componentChunkName": "component---src-pages-uiscripting-yncinteraction-mdx",
    "path": "/uiscripting/yncinteraction/",
    "result": {"pageContext":{"frontmatter":{"title":"YNC interactions using scripting"},"relativePagePath":"/uiscripting/yncinteraction.mdx","titleType":"append","MdxNode":{"id":"b2910c47-4105-512b-8fb2-bf85d14b60e0","children":[],"parent":"49ac5852-3a2d-581a-b357-a89398f167d7","internal":{"content":"---\ntitle: YNC interactions using scripting\n---\n\n## YNC interactions using scripting\n\nYNC or **Y**es, **N**o, **C**ancel interactions can now be designed using automation scripts. You must do some preparatory work before writing the script. First, you should define a message that\nSupports the YNC interaction. This is similar to defining the warning\nmessage group and key. Make sure you have the message as informational (I) and\nsupport the Yes and No buttons.\n\nThe following use case launches a yes/no dialog when the priority is set to 1. It asks users if they\nwant to set a default vendor. If the user selects \"yes\", the script will set the default\nvendor A0001 and will mark the vendor field as required. If the user selects \"no\", vendor is\nmarked as not required.\n\n\nThe following script associates the var v with vendor and is added as an Attribute Launch\npoint script with \"action\" event. \"assetpr\" has been defined in the \"asset\" group as an\ninformational message with buttons Y and N enabled.\n\n\n```python\ndef yes():\n  global v,v_required\n  v = \"A0001\"\n  v_required = True\n\ndef no():\n  global v,v_required\n  v_required = False;\n\ndef dflt():\n  service.log(\"dflt\")\n  params = [str(priority)]\n  service.yncerror(\"asset\", \"assetpr\",params)\n  \n  \ncases = {service.YNC_NULL:dflt,service.YNC_YES:yes,service.YNC_NO:no}\nif interactive:\n  if priority==1:\n    x = service.yncuserinput()\n    cases[x]()\n\n```\n","type":"Mdx","contentDigest":"e8fd43321f20c7b001527bd0524f0268","owner":"gatsby-plugin-mdx","counter":221},"frontmatter":{"title":"YNC interactions using scripting"},"exports":{},"rawBody":"---\ntitle: YNC interactions using scripting\n---\n\n## YNC interactions using scripting\n\nYNC or **Y**es, **N**o, **C**ancel interactions can now be designed using automation scripts. You must do some preparatory work before writing the script. First, you should define a message that\nSupports the YNC interaction. This is similar to defining the warning\nmessage group and key. Make sure you have the message as informational (I) and\nsupport the Yes and No buttons.\n\nThe following use case launches a yes/no dialog when the priority is set to 1. It asks users if they\nwant to set a default vendor. If the user selects \"yes\", the script will set the default\nvendor A0001 and will mark the vendor field as required. If the user selects \"no\", vendor is\nmarked as not required.\n\n\nThe following script associates the var v with vendor and is added as an Attribute Launch\npoint script with \"action\" event. \"assetpr\" has been defined in the \"asset\" group as an\ninformational message with buttons Y and N enabled.\n\n\n```python\ndef yes():\n  global v,v_required\n  v = \"A0001\"\n  v_required = True\n\ndef no():\n  global v,v_required\n  v_required = False;\n\ndef dflt():\n  service.log(\"dflt\")\n  params = [str(priority)]\n  service.yncerror(\"asset\", \"assetpr\",params)\n  \n  \ncases = {service.YNC_NULL:dflt,service.YNC_YES:yes,service.YNC_NO:no}\nif interactive:\n  if priority==1:\n    x = service.yncuserinput()\n    cases[x]()\n\n```\n","fileAbsolutePath":"/home/travis/build/maximo-app-framework/maximo-autoscript-documentation/src/pages/uiscripting/yncinteraction.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}