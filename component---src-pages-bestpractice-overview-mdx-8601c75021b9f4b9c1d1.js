"use strict";(self.webpackChunkmas_playbook=self.webpackChunkmas_playbook||[]).push([[8046],{5631:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return r},default:function(){return u}});var a=n(3366),o=(n(7294),n(4983)),i=n(4295),s=["components"],r={},l={_frontmatter:r},c=i.Z;function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)(c,Object.assign({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",null,"Scripting best practices"),(0,o.kt)("p",null,"Scripting allows you to extend Maximo business logic using Python/JS or any other JSR223 compliant scripting language. All the script code gets compiled to Java bytecode and are cached as part of Maximo runtime caches. When the script is invoked, it is the cached bytecode that is executed by the JVM using the JSR223 bridge. Since the script code executes in the same thread as other Maximo business logic (written in Java), a poorly written script code can impact the performance of the system negatively. In general you should follow the Maximo Performance guidelines because scripting in the end is equivalent to Maximo custom code, to avoid common mistakes. "),(0,o.kt)("h3",null,"Choosing the right launch point and event"),(0,o.kt)("p",null,"Launch points are script trigger points. Often, choosing the right launch point can help avoid certain performance issues in scripting. For example, in Maximo 7.5 scripting release, there was no support for attribute value initialization. This led many script developers to use the Object Launch Point (OLP) Init event to initialize the MBO attribute values. Though functionally was not affected, it potentially could lead to performance issues when selecting a bunch of MBOs (in ",(0,o.kt)("strong",{parentName:"p"},"List")," tab or APIs/MIF, Escalations). The OLP init event script gets executed for every MBO that is selected in the MboSet, even though the attribute whose value was getting initialized by the script was not even used or shown. You can avoid this by changing the Object launch point to Attribute launch point for the Initialize Value event. The following sample script code shows thisvalue is the current attribute init value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"if priority is not None:\n   thisvalue=2*priority\n")),(0,o.kt)("p",null,"The MBO framework will invoke this script only when this attribute is referred to by the code or the UI. "),(0,o.kt)("p",null,"Another example of Launch point choice is in the Integration skipping events use case. Often, you would use the user exit scripting to determine if you need to skip an outbound integration message. However, at this point the system has already entailed the cost of serializing the MBOs. Instead, you should use the Publish Channel Event Filter scripting which gets invoked right when the event is triggered and much before any serialization of MBOs happen. The following sample shows the Event Filter scripting which works with the MBOs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'if service.getMbo().getString("status")=="APPR":\n  evalresult=False\nevalresult=True\n')),(0,o.kt)("h3",null,"Avoid costly Object init events if invoked from ",(0,o.kt)("strong",{parentName:"h3"},"List")," tab"),(0,o.kt)("p",null,"You may want to do costly Object init scripts only when the object is initialized from the ",(0,o.kt)("strong",{parentName:"p"},"Main")," tab (UI) and not from the ",(0,o.kt)("strong",{parentName:"p"},"List")," tab. This is because in such cases, the following sample code bis helpful:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from psdi.common.context import UIContext\nif UIContext.getCurrentContext() is not None and UIContext.isFromListTab()==False:\n    ..costly initlization..\n")),(0,o.kt)("h3",null,"Watch out for conflicting launch point event scripts"),(0,o.kt)("p",null,"Scripting framework allows attaching multiple scripts to the same launch point event. This poses a problem if the script code expects to execute it in a certain order before or after certain other scripts in the same launch point event. Since the Maximo event topic is an un-ordered map, the events are triggered without a fixed order. This can potentially cause issues if the order dependency is not managed properly. You should evaluate the reason to attach multiple scripts for the same launch point event and evaluate if it makes more sense to combine them into one script. The other option is to make sure there is no dependency between the scripts. "),(0,o.kt)("h3",null,"Avoid calling save in middle of a transaction"),(0,o.kt)("p",null,"This is a common coding pattern seen in scripts that can cause problems to Maximo transactions and event firing.\nIdeally, when a Maximo transaction is in progress, the script should try to be part of that encompassing transaction. The MBOs created or updated by a script are automatically part of the encompassing transaction as long as those were created from the script launch point MBO or any related MBO. If you create an MBO using the MXServer.getMXServer().getMboSet(“…”) API, it would be outside the encompassing transaction unless you add it explicitly to the following encompassing transaction:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"mbo.getMXTransaction().add(<newly created a mboset>)\n")),(0,o.kt)("h3",null,"Calling MboSet.count() many times"),(0,o.kt)("p",null,"It is a common programming mistake in the scripts when checking the count of an MboSet multiple times. The count() call ends up firing an SQL every time it is called. An optimal approach would be to invoke it once, store the value in a var, and reuse that var for subsequent code flow. The following example demonstrate this:\n",(0,o.kt)("strong",{parentName:"p"},"Good code:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"cnt = mboset.count()\nif cnt<=1:\n  service.log(“skipping this as count is “+cnt)\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Bad code:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"if mboset.count()<=1:\n  service.log(“skipping this as count is “+mboset.count())\n")),(0,o.kt)("h3",null,"Closing the MboSet"),(0,o.kt)("p",null,"Maximo MBO framework always releases the MboSets created after a transaction is complete. This is true as long as all the MboSets were created as a related set to launch point MBO or any of it related MBOs. If however the MboSet is created using the MXServer.getMXServer().getMboSet(..) API, the script code is responsible for closing and clearing that MboSet. You should do the following try finally block to achieve this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"try:\n  ..some code..\nfinally:\n  mboset.cleanup()\n")),(0,o.kt)("p",null,"If this is not done, it tends to start building up and may result in OOM errors. "),(0,o.kt)("h3",null,"Avoid the Mozilla Compatibility Script for Nashorn"),(0,o.kt)("p",null,"Moving from Rhino (Java 7) to Nashorn (Java 8) is recommended for performance reasons. Nashorn performs better in Java 8 compared to Rhino. Leveraging the Mozilla compatibility script with Nashorn can result in poor performance in Java 8. "),(0,o.kt)("h3",null,"Check if logging in enabled before logging"),(0,o.kt)("p",null,"Logging is often done inside the script without checking the log level. The following sample shows how that can impact performance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'service.log("count of mbos "+mboset.count())\n')),(0,o.kt)("p",null,"This would unfortunately result in mboset.count() being called, even though the script logging is disabled."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from psdi.util.logging import MXLoggerFactory\nlogger = MXLoggerFactory.getLogger("maximo.script");\ndebugEnabled = logger.isDebugEnabled()\n\nif debugEnabled:\n  service.log("count of mbos "+mboset.count())\n')),(0,o.kt)("p",null,"Starting from 7612, the following function will be added in the “service” variable that will allow you to check it easily:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"if service.isLoggingEnabled():\n  service.log(“count of mbos “+mboset.count())\n")))}u.isMDXComponent=!0},4295:function(e,t,n){n.d(t,{Z:function(){return w}});var a=n(7294),o=n(8650),i=n.n(o),s=n(5444),r=n(6949),l=n(3293),c=n(5900),u=n.n(c),p=function(e){var t,n=e.title,o=e.theme,i=e.tabs,s=void 0===i?[]:i;return a.createElement("div",{className:u()("PageHeader-module--page-header--NqfPe",(t={},t["PageHeader-module--with-tabs--vbQ-W"]=s.length,t["PageHeader-module--dark-mode--WCeH8"]="dark"===o,t))},a.createElement("div",{className:"bx--grid"},a.createElement("div",{className:"bx--row"},a.createElement("div",{className:"bx--col-lg-12"},a.createElement("h1",{id:"page-title",className:"PageHeader-module--text--Er2EO"},n)))))},h=function(e){var t=e.relativePagePath,n=e.repository,o=(0,s.useStaticQuery)("1364590287").site.siteMetadata.repository,i=n||o,r=i.baseUrl,l=i.subDirectory,c=r+"/edit/"+i.branch+l+"/src/pages"+t;return r?a.createElement("div",{className:"bx--row EditLink-module--row--BEmSX"},a.createElement("div",{className:"bx--col"},a.createElement("a",{className:"EditLink-module--link--IDrl1",href:c},"Edit this page on GitHub"))):null},m=n(4275),d=n(1721),g=function(e){function t(){return e.apply(this,arguments)||this}return(0,d.Z)(t,e),t.prototype.render=function(){var e=this.props,t=e.title,n=e.tabs,o=e.slug,r=o.split("/").filter(Boolean).slice(-1)[0],l=n.map((function(e){var t,n=i()(e,{lower:!0,strict:!0}),l=n===r,c=new RegExp(r+"/?(#.*)?$"),p=o.replace(c,n);return a.createElement("li",{key:e,className:u()((t={},t["PageTabs-module--selected-item--aBB0K"]=l,t),"PageTabs-module--list-item--024o6")},a.createElement(s.Link,{className:"PageTabs-module--link--Kz-7R",to:""+p},e))}));return a.createElement("div",{className:"PageTabs-module--tabs-container--Cdfzw"},a.createElement("div",{className:"bx--grid"},a.createElement("div",{className:"bx--row"},a.createElement("div",{className:"bx--col-lg-12 bx--col-no-gutter"},a.createElement("nav",{"aria-label":t},a.createElement("ul",{className:"PageTabs-module--list--xLqxG"},l))))))},t}(a.Component),b=g,f=n(2881),v=n(6958),k=n(36),y=function(e){var t=e.date,n=new Date(t);return t?a.createElement(k.X2,{className:"last-modified-date-module--row--XJoYQ"},a.createElement(k.sg,null,a.createElement("div",{className:"last-modified-date-module--text--ogPQF"},"Page last updated: ",n.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null},w=function(e){var t=e.pageContext,n=e.children,o=e.location,c=e.Title,u=t.frontmatter,d=void 0===u?{}:u,g=t.relativePagePath,k=t.titleType,w=d.tabs,M=d.title,N=d.theme,x=d.description,E=d.keywords,T=d.date,P=(0,v.Z)().interiorTheme,S=(0,s.useStaticQuery)("2456312558").site.pathPrefix,O=S?o.pathname.replace(S,""):o.pathname,L=w?O.split("/").filter(Boolean).slice(-1)[0]||i()(w[0],{lower:!0}):"",B=N||P;return a.createElement(l.Z,{tabs:w,homepage:!1,theme:B,pageTitle:M,pageDescription:x,pageKeywords:E,titleType:k},a.createElement(p,{title:c?a.createElement(c,null):M,label:"label",tabs:w,theme:B}),w&&a.createElement(b,{title:M,slug:O,tabs:w,currentTab:L}),a.createElement(f.Z,{padded:!0},n,a.createElement(h,{relativePagePath:g}),a.createElement(y,{date:T})),a.createElement(m.Z,{pageContext:t,location:o,slug:O,tabs:w,currentTab:L}),a.createElement(r.Z,null))}}}]);
//# sourceMappingURL=component---src-pages-bestpractice-overview-mdx-8601c75021b9f4b9c1d1.js.map